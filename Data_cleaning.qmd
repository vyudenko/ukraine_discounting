---
title: "Data cleaning & Analysis"
author: "Vadym Yudenko"
format: 
  html:
    self-contained: true
    toc: true
    toc-location: right 
    toc-title: Contents 
    number-sections: false
editor: visual
---

# Setup

```{r libraries, warning=FALSE, message=FALSE, echo=FALSE}
# loading packages
library(lattice)
library(tidyverse)
library(likert)
library(MASS)
library(psych)
library(viridis)
library(ggplot2)
library(ggrepel)
library(here)
library(flextable)
library(remotes)
library(ggplot2)
library(patchwork)
library(gt)
library(ggExtra)
library(ggthemes)
library(gtsummary)
library(hrbrthemes)
library(stargazer)
library(fastDummies)
library(haven)

```

```{r loading data}
data <- read_sav("data/gradus_data.sav")

colnames(data)[colnames(data) == "intnr"] <- "ResponseId"
data <- data[, -c(2,41,60)]


data_copy <- data %>% 
  relocate(c(q12, q13), .after = q18) %>% 
  rename(temp_q17 = "q12",
         temp_q18 = "q13",
         temp_q12 = "q14",
         temp_q13 = "q15",
         temp_q14 = "q16",
         temp_q15 = "q17",
         temp_q16 = "q18") %>% 
  rename(q17 = "temp_q17",
         q18 = "temp_q18",
         q12 = "temp_q12",
         q13 = "temp_q13",
         q14 = "temp_q14",
         q15 = "temp_q15",
         q16 = "temp_q16")

# Fixing temporal discounting answers 

change_values <- function(x) {
  x[x == 1] <- 0
  x[x == 2] <- 1
  return(x)
}

data_copy[, c(2:18, 35)] <- lapply(data_copy[, c(2:18, 35)], change_values)
```

```{r functions}
#######################################
######### Stats-related functions #####
#######################################

get_scores <- function (x) {
  
  ## This function will compute the total temporal discount for each participant based on their responses to each block question
  ##
  ## Input (x): A block of questions (5 previous questions to the one parsed to the function)
  ##
  ## Output: Vector of individual sum responses per block
  
  f <- as.numeric(gsub("block", "", x$block))[1]
  
  if (f == 1) {
    x %>% 
      mutate(score = case_when(
        amount_later == 750 & choice == 0 ~ 5,
        amount_later == 750 & choice == 1 ~ 4,
        amount_later == 600 & choice == 1 ~ 3,
        amount_later == 510 & choice == 0 ~ 2,
        amount_later == 505 & choice == 0 ~ 1,
        amount_later == 505 & choice == 1 ~ 0
      ))
    
  } else if (f == 2) {
    x %>% 
      mutate(score = case_when(
        amount_later == 750 & choice == 1 ~ 0,
        amount_later == 750 & choice == 0 ~ 1,
        amount_later == 600 & choice == 0 ~ 2,
        amount_later == 510 & choice == 1 ~ 3,
        amount_later == 505 & choice == 0 ~ 5,
        amount_later == 505 & choice == 1 ~ 4
      ))
  } else {
    x %>% 
      mutate(score = case_when(
        amount_later == 7500 & choice == 0 ~ 5,
        amount_later == 7500 & choice == 1 ~ 4,
        amount_later == 6000 & choice == 1 ~ 3,
        amount_later == 5100 & choice == 0 ~ 2,
        amount_later == 5050 & choice == 0 ~ 1,
        amount_later == 5050 & choice == 1 ~ 0
      ))
  }
}



get_latest_answer <- function (x, y){
  
  ## This function will obtain the latest answer given to the initial baseline questions. This function is necessary to control for the different possible options shown to each individual.
  ##
  ## Input: (x) A data frame including choices to questions; (y) a scalar identifying the next item following the item block. 
  ##
  ## Output: Vector of individual responses to the anomaly item
  
  x %>% 
    group_by(ResponseId) %>% 
    filter(as.numeric(gsub("Q", "", question)) < y) %>% 
    arrange(desc(as.numeric(gsub("Q", "", question)))) %>% 
    slice(1) %>% 
    ungroup() %>% 
    arrange(ResponseId) %>% 
    dplyr:::select(ResponseId, choice, amount_later, block) 
}

get_second_choices <- function (x, y) {
  
  ## This function will obtain the answer given to the anomalies questions. This function necessary to control for the different possible options shown to each individual
  ##
  ## Input: (x) A data frame including choices to questions; (y) the anomaly item identifier. 
  ##
  ## Output: Vector of individual responses to the anomaly item
  
  x %>% 
    arrange(ResponseId) %>%   
    arrange(desc(as.numeric(gsub("Q", "", question)))) %>%   
    filter(question == y) %>% 
    dplyr:::select(choice) %>% 
    unlist() %>% 
    as.vector()
}


fixer_anom <- function (d, type = NULL){
  
  ## This function will compute whether an anomaly was observed (and whether the initial answer was a sooner or later decision) and if the possible anomaly was congruent with theory or not.
  ##
  ## Input: (x) A data frame including the first choice (fc) and the type of anomaly to be estimated. 
  ##
  ## Output: dataframe including the individual id and the variables response (possible anomaly and initial decision) and anomaly (whether an anomaly or a consistent decision was observed).
  
  if (type == "presbias" || type == "absolmag" || type == "delay") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "No anomaly sooner",
        fc == 1 & sc == 0 ~ "Anomaly later",
        fc == 0 & sc == 1 ~ "Anomaly sooner",
        fc == 1 & sc == 1 ~ "No anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>%
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>% 
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  } else if (type == "gainloss") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "Anomaly sooner",
        fc == 1 & sc == 0 ~ "No anomaly later",
        fc == 0 & sc == 1 ~ "No anomaly sooner",
        fc == 1 & sc == 1 ~ "Anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>% 
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>%
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  }  else if (type == "subaddit") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "No anomaly sooner",
        fc == 0 & sc == 1 ~ "Anomaly sooner",
        fc == 1 & sc == 1 ~ "Inconsistent",
        fc == 1 & sc == 0 ~ "Inconsistent",
        fc == 2 & sc == 0 ~ "Anomaly later",
        fc == 2 & sc == 1 ~ "No anomaly later",
      )) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent",
        response ==  "Inconsistent" ~ "Inconsistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly", "Inconsistent")) %>% 
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>%
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type)  
    
  }
} 

fixer_anoms <- function (d, type = NULL){
  
  ## This function will compute whether an anomaly was observed (and whether the initial answer was a sooner or later decision) and if the possible anomaly was congruent with theory or not.
  ##
  ## Input: (x) A data frame including the first choice (fc) and the type of anomaly to be estimated. 
  ##
  ## Output: dataframe including the individual id and the variables response (possible anomaly and initial decision) and anomaly (whether an anomaly or a consistent decision was observed).
  
  if (type == "presbias" || type == "absolmag" || type == "delay") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "No anomaly sooner",
        fc == 1 & sc == 0 ~ "Anomaly later",
        fc == 0 & sc == 1 ~ "Anomaly sooner",
        fc == 1 & sc == 1 ~ "No anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>%
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>% 
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  } else if (type == "gainloss") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "Anomaly sooner",
        fc == 1 & sc == 0 ~ "No anomaly later",
        fc == 0 & sc == 1 ~ "No anomaly sooner",
        fc == 1 & sc == 1 ~ "Anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>% 
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>%
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  } 
} 


convert_labelled_to_numeric <- function(variable) {
  if (inherits(variable, "haven_labelled")) {
    return(as.numeric(as.character(variable)))
  } else {
    return(variable)
  }
}
```

```{r data prep}
data_clean <- data_copy %>%
  mutate(oblast_before_ua = as.character(as_factor(demo_oblast)),
         oblast_before_en = fct_recode(oblast_before_ua,
                                    "Vinnytsia Region" = "Вінницька область",
                                    "Volyn Region" = "Волинська область",
                                    "Dnipropetrovsk Region" = "Дніпропетровська область",
                                    "Donetsk Region" = "Донецька область",
                                    "Zhytomyr Region" = "Житомирська область",
                                    "Zakarpattia Region" = "Закарпатська область",
                                    "Zaporizhzhia Region" = "Запорізька область",
                                    "Ivano-Frankivsk Region" = "Івано-Франківська область",
                                    "Kyiv City" = "м. Київ",
                                    "Kyiv Region" = "Київська область",
                                    "Kirovohrad Region" = "Кіровоградська область",
                                    "Luhansk Region" = "Луганська область",
                                    "Lviv Region" = "Львівська область",
                                    "Mykolaiv Region" = "Миколаївська область",
                                    "Odesa Region" = "Одеська область",
                                    "Poltava Region" = "Полтавська область",
                                    "Rivne Region" = "Рівненська область",
                                    "Sumy Region" = "Сумська область",
                                    "Ternopil Region" = "Тернопільська область",
                                    "Kharkiv Region" = "Харківська область",
                                    "Kherson Region" = "Херсонська область",
                                    "Khmelnytskyi Region" = "Хмельницька область",
                                    "Cherkasy Region" = "Черкаська область",
                                    "Chernivtsi Region" = "Чернівецька область",
                                    "Chernihiv Region" = "Чернігівська область"),
         region_before_ua = as.character(as_factor(demo_region)),
         region_before_en = fct_recode(region_before_ua,
                                       "Kyiv City" = "Київ",
                                       "South" = "Південний",
                                       "Center" = "Центральний",
                                       "West" = "Західний",
                                       "North" = "Північний",
                                       "East" = "Східний"),
         city_before_ua = as.character(as_factor(demo_city)),
         city_before_en = fct_recode(city_before_ua,
                                        "Kyiv" = "м. Київ",
                                        "Kherson" = "Херсон",
                                        "Cherkasy" = "Черкаси",
                                        "Mukachevo" = "Мукачево",
                                        "Korosten" = "Коростень",
                                        "Shostka" = "Шостка",
                                        "Kremenchuk" = "Кременчук",
                                        "Energodar" = "Енергодар",
                                        "Boryspil" = "Бориспіль",
                                        "Pryluky" = "Прилуки",
                                        "Zhytomyr" = "Житомир",
                                        "Nikopol" = "Нікополь",
                                        "Druzhkivka" = "Дружківка",
                                        "Zaporizhzhia" = "Запоріжжя",
                                        "Kamianske" = "Кам'янське",
                                        "Khmelnytskyi" = "Хмельницький",
                                        "Kropyvnytskyi" = "Кропивницький",
                                        "Kharkiv" = "Харків",
                                        "Odesa" = "Одеса",
                                        "Lviv" = "Львів"),
         city_size_before_ua = as.character(as_factor(demo_сity_size)),
         cit_size_before_en = fct_recode(city_size_before_ua,
                                         "1 mil.+" = "1 млн.+",
                                         "500k-1 mil." = "500-1 млн.",
                                         "100k-500k" = "100-500 тис.",
                                         "50k-100k" = "50-100 тис."),
         oblast_moving_ua = as.character(as_factor(oblast_moving)),
         oblast_moving_en = fct_recode(oblast_moving_ua,
                                    "Vinnytsia Region" = "Вінницька область",
                                    "Volyn Region" = "Волинська область",
                                    "Dnipropetrovsk Region" = "Дніпропетровська область",
                                    "Donetsk Region" = "Донецька область",
                                    "Zhytomyr Region" = "Житомирська область",
                                    "Zakarpattia Region" = "Закарпатська область",
                                    "Zaporizhzhia Region" = "Запорізька область",
                                    "Ivano-Frankivsk Region" = "Івано-Франківська область",
                                    "Kyiv City" = "м. Київ",
                                    "Kyiv Region" = "Київська область",
                                    "Kirovohrad Region" = "Кіровоградська область",
                                    "Luhansk Region" = "Луганська область",
                                    "Lviv Region" = "Львівська область",
                                    "Mykolaiv Region" = "Миколаївська область",
                                    "Odesa Region" = "Одеська область",
                                    "Poltava Region" = "Полтавська область",
                                    "Rivne Region" = "Рівненська область",
                                    "Sumy Region" = "Сумська область",
                                    "Ternopil Region" = "Тернопільська область",
                                    "Kharkiv Region" = "Харківська область",
                                    "Kherson Region" = "Херсонська область",
                                    "Khmelnytskyi Region" = "Хмельницька область",
                                    "Cherkasy Region" = "Черкаська область",
                                    "Chernivtsi Region" = "Чернівецька область",
                                    "Chernihiv Region" = "Чернігівська область"),
         city_moving_en = fct_recode(city_moving,
                                        "Drohobych" = "Дрогобич",
                                        "Lutsk" = "Луцьк",
                                        "Ivano-Frankivsk" = "Івано-Франківськ",
                                        "Vinnytsia" = "Вінниця",
                                        "Lviv" = "Львів",
                                        "Kyiv" = "м. Київ",
                                        "Resided in village / settlement" = "Проживав(ла) в селищі / селі",
                                        "Poltava" = "Полтава",
                                        "Zaporizhzhia" = "Запоріжжя",
                                        "Radomyshl" = "Радомишль",
                                        "Khmelnytskyi" = "Хмельницький",
                                        "Smila" = "Сміла",
                                        "Odesa" = "Одеса",
                                        "Mukachevo" = "Мукачево",
                                        "Horishni Plavni" = "Горішні Плавні",
                                        "Ladyzhin" = "Ладижин",
                                        "Dnipro" = "Дніпро",
                                        "Ternopil" = "Тернопіль",
                                        "Yaremche" = "Яремче",
                                        "Kovel" = "Ковель",
                                        "Netishyn" = "Нетішин",
                                        "Nizhyn" = "Ніжин",
                                        "Kaniv" = "Канів",
                                        "Nikopol" = "Нікополь",
                                        "Oleksandriia" = "Олександрія",
                                        "Volochysk" = "Волочиськ",
                                        "Podilsk" = "Подільськ",
                                        "Kremenchuk" = "Кременчук",
                                        "Resided in SMT" = "Проживав(ла) в СМТ",
                                        "Berdychiv" = "Бердичів",
                                        "Sumy" = "Суми",
                                        "Pomichna" = "Помічна",
                                        "Rivne" = "Рівне",
                                        "Irshava" = "Іршава",
                                        "Svalyava" = "Свалява",
                                        "Chervonohrad" = "Червоноград",
                                        "Kolomyia" = "Коломия",
                                        "Svitlovodsk" = "Світловодськ",
                                        "Cherkasy" = "Черкаси",
                                        "Uzhhorod" = "Ужгород",
                                        "Peremyshliany" = "Перемишляни",
                                        "Khust" = "Хуст",
                                        "Znamianka" = "Знам'янка",
                                        "Lokhvytsia" = "Лохвиця",
                                        "Olevsk" = "Олевськ",
                                        "Kropyvnytskyi" = "Кропивницький",
                                        "Zhovti Vody" = "Жовті Води",
                                        "Kryvyi Rih" = "Кривий Ріг",
                                        "Bila Tserkva" = "Біла Церква",
                                        "Zolotonosha" = "Золотоноша",
                                        "Zhashkiv" = "Жашків",
                                        "Pryluky" = "Прилуки",
                                        "Korostyshiv" = "Коростишів",
                                        "Bakhmach" = "Бахмач",
                                        "Bar" = "Бар",
                                        "Dolyna" = "Долина",
                                        "Zbarazh" = "Збараж",
                                        "Horodok" = "Городок",
                                        "Monastyryshche" = "Монастирище",
                                        "Kozyatyn" = "Козятин",
                                        "Pervomaisk" = "Первомайськ",
                                        "Vatutine" = "Ватутіне",
                                        "Morshyn" = "Моршин",
                                        "Tyachiv" = "Тячів",
                                        "Bilhorod-Dnistrovskyi" = "Білгород-Дністровський",
                                        "Chernivtsi" = "Чернівці",
                                        "Yampil" = "Ямпіль",
                                        "Synelnykove" = "Синельникове",
                                        "Zhytomyr" = "Житомир",
                                        "Truskavets" = "Трускавець",
                                        "Halych" = "Галич",
                                        "Kalinivka" = "Калинівка",
                                        "Zhmerynka" = "Жмеринка"),
         region_moving_ua = as.character(as_factor(region_moving)),
         region_moving_en = fct_recode(region_moving_ua,
                                       "Kyiv City" = "Київ",
                                       "South" = "Південний",
                                       "Center" = "Центральний",
                                       "West" = "Західний",
                                       "North" = "Північний",
                                       "East" = "Східний"),
         age_int = as.character(as_factor(demo_age_int)),
         gender_ua = as.character(as_factor(demo_gender)),
         gender = ifelse(gender_ua == "Жіноча", 0, ifelse(gender_ua == "Чоловіча", 1, NA)),
         educ_ua = as.character(as_factor(education)),
         region_war = case_when(
           oblast_before_en %in% c("Donetsk Region", "Zhytomyr Region", "Zaporizhzhia Region", "Kyiv City", "Kyiv Region", "Mykolaiv Region", "Sumy Region", "Kharkiv Region", "Kherson Region", "Chernihiv Region") ~ 1,
           TRUE ~ 0)) %>%
    mutate(geo = case_when(
    str_detect(oblast_before_en, "Vinnytsia Region") ~ "UA-05",
    str_detect(oblast_before_en, "Volyn Region") ~ "UA-07",
    str_detect(oblast_before_en, "Dnipropetrovsk Region") ~ "UA-12",
    str_detect(oblast_before_en, "Donetsk Region") ~ "UA-14",
    str_detect(oblast_before_en, "Zhytomyr Region") ~ "UA-18",
    str_detect(oblast_before_en, "Zakarpattia Region") ~ "UA-21",
    str_detect(oblast_before_en, "Zaporizhzhia Region") ~ "UA-23",
    str_detect(oblast_before_en, "Ivano-Frankivsk Region") ~ "UA-26",
    str_detect(oblast_before_en, "Kyiv City") ~ "UA-30",
    str_detect(oblast_before_en, "Kyiv Region") ~ "UA-32",
    str_detect(oblast_before_en, "Kirovohrad Region") ~ "UA-35",
    str_detect(oblast_before_en, "Luhansk Region") ~ "UA-09",
    str_detect(oblast_before_en, "Lviv Region") ~ "UA-46",
    str_detect(oblast_before_en, "Mykolaiv Region") ~ "UA-48",
    str_detect(oblast_before_en, "Odesa Region") ~ "UA-51",
    str_detect(oblast_before_en, "Poltava Region") ~ "UA-53",
    str_detect(oblast_before_en, "Rivne Region") ~ "UA-56",
    str_detect(oblast_before_en, "Sumy Region") ~ "UA-59",
    str_detect(oblast_before_en, "Ternopil Region") ~ "UA-61",
    str_detect(oblast_before_en, "Kharkiv Region") ~ "UA-63",
    str_detect(oblast_before_en, "Kherson Region") ~ "UA-65",
    str_detect(oblast_before_en, "Khmelnytskyi Region") ~ "UA-68",
    str_detect(oblast_before_en, "Cherkasy Region") ~ "UA-71",
    str_detect(oblast_before_en, "Chernivtsi Region") ~ "UA-74",
    str_detect(oblast_before_en, "Chernihiv Region") ~ "UA-77",
    TRUE ~ NA_character_
  )) %>% 
  mutate(stipend_main = ifelse(q20 == 1, 1, 0),
         pension_main = ifelse(q20 == 2, 1, 0),
         govpay_main = ifelse(q20 == 3, 1, 0),
         job_main = ifelse(q20 == 4, 1, 0),
         business_main = ifelse(q20 == 5, 1, 0),
         relatives_main = ifelse(q20 == 6, 1, 0),
         other_main = ifelse(q20 == 7, 1, 0),
         no_main = ifelse(q20 == 8, 1, 0)) %>% 
  rename(
    "debts" = "q24",
    "evacuate" = "q27_1",
    "occupation" = "q27_2",
    "bombing" = "q27_3",
    "prop_dmg" = "q27_4",
    "phys_viol" = "q27_5",
    "emo_viol" = "q27_6",
    "robbery" = "q27_7",
    "fam_afu" = "q27_8",
    "fam_death" = "q27_9",
    "war_no_ans" = "q27_10",
    "phys_injury" = "q28_1",
    "depression" = "q28_2",
    "confid_loss" = "q28_3",
    "insom" = "q28_4",
    "no_effect" = "q28_5",
    "eff_no_ans" = "q28_6",
    "war_last" = "q39",
    "age" = "demo_age",
    "return" = "geosoc10") %>% 
  mutate(debts_small = ifelse(q25 == 1, 1, 0),
         debts_medium = ifelse(q25 == 2, 1, 0),
         debts_big = ifelse(q25 == 3, 1, 0)) %>% 
  mutate(inc_5 = ifelse(q21 == 1, 1, 0),
         inc_20 = ifelse(q21 == 2, 1, 0),
         inc_40 = ifelse(q21 == 3, 1, 0),
         inc_60 = ifelse(q21 == 4, 1, 0),
         inc_80 = ifelse(q21 == 5, 1, 0),
         inc_100 = ifelse(q21 == 6, 1, 0)) %>%
  mutate(finc_5 = ifelse(q21_1 == 1, 1, 0),
         finc_20 = ifelse(q21_1 == 2, 1, 0),
         finc_40 = ifelse(q21_1 == 3, 1, 0),
         finc_60 = ifelse(q21_1 == 4, 1, 0),
         finc_80 = ifelse(q21_1 == 5, 1, 0),
         finc_100 = ifelse(q21_1 == 6, 1, 0)) %>% 
  mutate(expect_much_better = ifelse(q22 == 5, 1, 0),
         expect_better = ifelse(q22 == 4, 1, 0),
         expect_same = ifelse(q22 == 3, 1, 0),
         expect_worse = ifelse(q22 == 2, 1, 0),
         expect_much_worse = ifelse(q22 == 1, 1, 0)) %>% 
  mutate(change_much_better = ifelse(q23 == 5, 1, 0),
         change_better = ifelse(q23 == 4, 1, 0),
         change_same = ifelse(q23 == 3, 1, 0),
         change_worse = ifelse(q23 == 2, 1, 0),
         change_much_worse = ifelse(q23 == 1, 1, 0)) %>% 
  mutate(calm_always = ifelse(q26_1 == 1, 1, 0),
         calm_more = ifelse(q26_1 == 2, 1, 0),
         calm_freq = ifelse(q26_1 == 3, 1, 0),
         calm_often = ifelse(q26_1 == 4, 1, 0),
         calm_less = ifelse(q26_1 == 5, 1, 0),
         calm_never = ifelse(q26_1 == 6, 1, 0)) %>% 
  mutate(energy_always = ifelse(q26_2 == 1, 1, 0),
         energy_more = ifelse(q26_2 == 2, 1, 0),
         energy_freq = ifelse(q26_2 == 3, 1, 0),
         energy_often = ifelse(q26_2 == 4, 1, 0),
         energy_less = ifelse(q26_2 == 5, 1, 0),
         energy_never = ifelse(q26_2 == 6, 1, 0)) %>% 
  mutate(sad_always = ifelse(q26_3 == 1, 1, 0),
         sad_more = ifelse(q26_3 == 2, 1, 0),
         sad_freq = ifelse(q26_3 == 3, 1, 0),
         sad_often = ifelse(q26_3 == 4, 1, 0),
         sad_less = ifelse(q26_3 == 5, 1, 0),
         sad_never = ifelse(q26_3 == 6, 1, 0)) %>% 
  mutate(not_married = ifelse(geosoc1 == 1, 1, 0),
         married_together = ifelse(geosoc1 == 2, 1, 0),
         married_separate = ifelse(geosoc1 == 3, 1, 0),
         civil_marriage = ifelse(geosoc1 == 4, 1, 0),
         divorced = ifelse(geosoc1 == 5, 1, 0),
         widow = ifelse(geosoc1 == 6, 1, 0)) %>% 
  mutate(kids_under18 = ifelse(geosoc2 == 1, 1, 0),
         kids_over18 = ifelse(geosoc2 == 2, 1, 0),
         kids_under_over18 = ifelse(geosoc2 == 3, 1, 0),
         kids_pregnant = ifelse(geosoc2 == 4, 1, 0),
         no_kids = ifelse(geosoc2 == 5, 1, 0)) %>% 
  mutate(kids_together = ifelse(geosoc3 == 1, 1, 0),
         kids_some_together = ifelse(geosoc3 == 2, 1, 0),
         kids_not_together = ifelse(geosoc3 == 3, 1, 0)) %>% 
  mutate(stayed_city = ifelse(geosoc6 == 1, 1, 0),
         left_came_back = ifelse(geosoc6 == 2, 1, 0),
         left_no_come_back = ifelse(geosoc6 == 3, 1, 0)) %>% 
  mutate(left_within_oblast = ifelse(geosoc7 == 1, 1, 0),
         left_other_oblast = ifelse(geosoc7 == 2, 1, 0),
         left_abroad = ifelse(geosoc7 == 3, 1, 0)) %>% 
  mutate(country_abroad = ifelse(geosoc9 %in% c(1,2,3,4), 1, 0)) %>% 
  select(-q2, 
         -q3, 
         -q4, 
         -q5, 
         -q6, 
         -q7,
         -q8, 
         -q9, 
         -q10, 
         -q11, 
         -q12,
         -q13,
         -q14,
         -q15,
         -q16,
         -q16,
         -q17,
         -q18,
         -q19,
         -q20,
         -open_q20_7,
         -q20_1_1,
         -q20_1_2,
         -q20_1_3,
         -q20_1_4,
         -q20_1_5,
         -q20_1_6,
         -q20_1_7,
         -q20_1_8,
         -open_q20_1_7,
         -q21,
         -q21_1,
         -q22,
         -q23,
         -q25,
         -q26_1,
         -q26_2,
         -q26_3,
         -open_q39_5,
         -geosoc1,
         -geosoc2,
         -geosoc3,
         -open_geosoc3_4,
         -geosoc6,
         -geosoc7,
         -geosoc9,
         -open_geosoc9_4,
         -educ_ua,
         -demo_oblast, 
         -demo_age_int, 
         -demo_gender, 
         -demo_region, 
         -demo_city, 
         -demo_сity_size,
         -oblast_moving,
         -oblast_moving_ua,
         -region_moving,
         -region_moving_ua,
         -education, 
         -region_before_ua,
         -gender_ua, 
         -oblast_before_ua, 
         -city_before_ua,
         -city_size_before_ua,
         -сity_size_moving,
         -city_moving,
         -weight)

# dummies <- model.matrix(~ oblast_before_en - 1, data_clean) %>%
#   as.data.frame()
# 
# # To join the dummy variables back to your original dataset:
# data_with_dummies <- bind_cols(data_clean, dummies)
```

```{r discounting}
dat_items <- 
  data_copy[, c(1:18)] %>%
  arrange(ResponseId) %>% 
  mutate(amount_later16 = case_when(
    q2 == 1 & q5 == 0 ~ 550,
    q3 == 1 ~ 600,
    q4 == 0 | q4 == 1 ~ 750,
    q5 == 1 & q6 == 0 ~ 510,
    q6 == 1 ~ 505)) %>% 
  
  mutate(amount_later17 = case_when(
    q2 == 1 & q5 == 0 ~ 600,
    q3 == 1 ~ 700,
    q4 == 1 | q4 == 0 ~ 1000,
    q5 == 1 & q6 == 0 ~ 520,
    q6 == 0 ~ 510)) %>% 
  
  
  mutate(amount_later18 = case_when(
    amount_later16 == 505  ~ 505,
    amount_later16 == 510  ~ 510,
    amount_later16 == 550  ~ 550,
    amount_later16 == 600  ~ 600,
    amount_later16 == 750  ~ 750
  )) %>% 
  
  mutate(amount_later19 = case_when(
    amount_later16 == 505  ~ 505,
    amount_later16 == 510  ~ 510,
    amount_later16 == 550  ~ 550,
    amount_later16 == 600  ~ 600,
    amount_later16 == 750  ~ 750
  )) %>% 
  
  pivot_longer(q2:q18, 
               names_to = c("question")) %>% 
  
  mutate (amount_later = case_when(
    question == "q2" | question == "q7" ~ 550,
    question == "q3" | question == "q8" ~ 600,
    question == "q4" | question == "q9" ~ 750,
    question == "q5" | question == "q10"~ 510,
    question == "q6" | question == "q11"~ 505,
    question == "q12" ~ 5500,
    question == "q13" ~ 6000,
    question == "q14" ~ 7500,
    question == "q15" ~ 5100,
    question == "q16" ~ 5050,
    question == "q17" ~ amount_later16)) %>% 

  mutate (question = paste("Q",rep(1:ncol(select(data_copy, q2:"q18")), nrow(data_copy)), sep ="")) %>%
  mutate (question_num = as.numeric(gsub("Q", "", question))) %>% 
  
  mutate ( block = case_when(
    question_num < 6 ~ "block1",
    question_num >= 6 & question_num < 11 ~ "block2",
    question_num >= 11 & question_num < 16 ~ "block3",
    question_num == 16 ~ "anom1",
    question_num == 17 ~ "anom2",  # Common difference
    # question_num == 18 ~ "anom3",
    # question_num == 19 ~ "anom3",
  )) %>% 

    mutate (choice = case_when(
    is.na(value) ~ NA_real_,
    value == 0 ~ 0,
    value == 1 ~ 1,
    TRUE  ~ 1
  )) %>% 
  
  rename(choice_text = "value") %>% 
  relocate(choice_text, .after = choice) %>%
  
  select(-amount_later16, -amount_later17, -amount_later18, -amount_later19) %>%
  drop_na(choice) %>% 
  mutate_if(is.character,as.factor)



presbias <- as.numeric(get_latest_answer(dat_items, 6)$choice != get_second_choices(dat_items,"Q16"))
absolmag <- as.numeric(get_latest_answer(dat_items, 6)$choice != as.numeric(get_latest_answer(dat_items, 13)$choice))
gainloss <- as.numeric(get_latest_answer(dat_items, 6)$choice == as.numeric(get_latest_answer(dat_items, 11)$choice))
delayspeed <- as.numeric(get_latest_answer(dat_items, 6)$choice != get_second_choices(dat_items,"Q17"))

anomalies_data <- list()

## We apply the function fixer_anom to estimate whether the anomalies are observed and whether those are consistent with the theory or not.
## Given a first and a second set of responses, plus an ID identifier, it will classify the pattern of responses in anomaly/not anomaly and in the first case, whether it is consistent or not.
## In the second case (not anomaly), it will also inform whether the first decision was a sooner or a later choice.

anomalies_data[[1]] <- fixer_anoms (data.frame(fc = get_latest_answer(dat_items, 6)$choice,
                                              sc =  get_second_choices(dat_items,"Q16"),
                                              ResponseId = unique(dat_items$ResponseId)), type = "presbias")

anomalies_data[[2]] <- fixer_anoms (data.frame(fc = get_latest_answer(dat_items, 6)$choice,
                                              sc =  as.numeric(get_latest_answer(dat_items, 16)$choice),
                                              ResponseId = unique(dat_items$ResponseId)), type = "absolmag")

anomalies_data[[3]] <- fixer_anoms (data.frame(fc = get_latest_answer(dat_items, 6)$choice,
                                              sc =  as.numeric(get_latest_answer(dat_items, 11)$choice),
                                              ResponseId = unique(dat_items$ResponseId)), type = "gainloss")

anomalies_data[[4]] <- fixer_anoms (data.frame(fc =  get_latest_answer(dat_items, 6)$choice,
                                              sc =  get_second_choices(dat_items,"Q17"),
                                              ResponseId = unique(dat_items$ResponseId)), type = "delay")


anomalies_congruent <- anomalies_data %>% 
  
  ### We are only interested in individual responses
  reduce(left_join, by = "ResponseId") %>%
  rename ( "presbias" = "response.x",
           "absolmag" = "response.y",
           "gainloss" = "response.x.x",
           "delayspeed" = "response.y.y") %>% 
  
  select(ResponseId, presbias, absolmag, gainloss, delayspeed) %>% 
  mutate_at(vars(presbias, absolmag, gainloss, delayspeed),
            funs(case_when(
              . == "Congruent" ~ 1,
              TRUE ~ 0)))

##  We calculate the temporal discount scores from responses to each block plus items Q17 to Q19 (anomalies)
### Careful with reversed scores when estimating the scores

scores <- get_scores(get_latest_answer(dat_items, 6))$score +
  5 - get_scores(get_latest_answer(dat_items, 11))$score +
  get_scores(get_latest_answer(dat_items, 16))$score +
  1 - get_second_choices(dat_items, "Q16") +
  1 - get_second_choices(dat_items, "Q17")

### We merge these scores and the anomalies rates with the original dataset 
q <- dat_items %>% 
  count(ResponseId) %>% 
  arrange()        

dat_items <- dat_items %>% 
  arrange(ResponseId) %>%
  mutate (score = rep(scores, q$n),
          presbias = rep(anomalies_congruent$presbias, q$n),
          absolmag = rep(anomalies_congruent$absolmag, q$n),
          gainloss = rep(anomalies_congruent$gainloss, q$n),
          delayspeed = rep(anomalies_congruent$delayspeed, q$n))

dat_unique <- dat_items %>% 
  distinct(ResponseId, .keep_all = TRUE) %>% 
  select(-question, -amount_later, -question_num, -block, -choice, -choice_text)

rm(q,scores, presbias, absolmag, gainloss, delayspeed)
```

```{r data prep}
dt <- data_clean %>% 
  left_join(dat_unique, by = "ResponseId")


dt <- dt %>%  
  mutate(across(everything(), convert_labelled_to_numeric)) %>% 
  mutate(score.c = c(scale(score))) 

```


```{r saving data}

# Calculating temporal discounting score and anomalies

# writexl::write_xlsx(dt, "survey.xlsx", col_names = TRUE)
# writexl::write_xlsx(data_clean, "survey_1.xlsx", col_names = TRUE)
```


## EDA

```{r Distribution of TD}
ruggeri_2021 <- read.csv("data/ruggeri_2021.csv")

ggplot(ruggeri_2021,aes(score)) +
  geom_histogram(bins = 17)

sum(dt$presbias) + sum(dt$absolmag) + sum(dt$gainloss) + sum(dt$delayspeed)
```


```{r income plots, warning=FALSE, message=FALSE, echo=FALSE}
# Calculate the number of "Don't want" responses for each question
dontwant_count_q21 <- sum(data_copy$q21 == 7)
dontwant_count_q21_1 <- sum(data_copy$q21_1 == 7)

# Filter out "Don't want" responses from data_copy for g2 plot
data_copy_filtered_g2 <- data_copy[data_copy$q21 != 7,]

# g2 Plot
g2 <- ggplot(data_copy_filtered_g2, aes(q21, fill = demo_gender)) +
  geom_bar() +
  labs(title = "Individual income",
       x = "",
       y = "Frequency of responses",) +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic() +
  theme(text = element_text(family = "Garamond", size = 12),
        plot.title = element_text(hjust = 0.5),
        axis.text.y = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6), 
                     labels = c("5-",
                                "5-19",
                                "20-39",
                                "40-59",
                                "60-79",
                                "80+"))

# Filter out "Don't want" responses from data_copy for g1 plot
data_copy_filtered_g1 <- data_copy[data_copy$q21_1 != 7,]

# g2 Plot
g2 <- ggplot(data_copy_filtered_g2, aes(q21, fill = demo_gender)) +
  geom_bar() +
  labs(title = "Individual income",
       x = "",
       y = "Frequency of responses",) +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic() +
  theme(text = element_text(family = "Garamond", size = 12),
        plot.title = element_text(hjust = 0.5),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6), 
                     labels = c("5-",
                                "5-19",
                                "20-39",
                                "40-59",
                                "60-79",
                                "80+")) +
  scale_y_continuous(limits = c(0, 510))

# g1 Plot
g1 <- ggplot(data_copy_filtered_g1, aes(x = q21_1)) +
  geom_bar() +
  labs(title = "Household income",
       x = "",
       y = "",
       caption = "116 respondents chose not to disclose their individual income and 133 - household income. 
       There were no cases of people reporting a lower household income and higher individual.") +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic() +
  theme(text = element_text(family = "Garamond", size = 12),
        plot.caption = element_text(size = 11),
        plot.title = element_text(hjust = 0.5),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6), 
                     labels = c("5-",
                                "5-19",
                                "20-39",
                                "40-59",
                                "60-79",
                                "80+")) +
  scale_y_continuous(limits = c(0, 510))

# Combine the plots
(g2 + g1)
```

```{r}
# sanity check
check <- data_copy %>% 
  select(q21, q21_1, geosoc1) %>% 
  filter(q21 != 7 & q21_1 != 7) %>%
  mutate(anom = q21 > q21_1,
         breadwinner = q21 == q21_1)

g3 <- ggplot(check, aes(x = as.factor(breadwinner))) +
  geom_bar() +
  labs(title = "Personal income = Household income?",
       x = "",
       y = "# of responders") +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic()

g3

g4 <- check %>% 
  filter(geosoc1 %in% c(1,3,5,6)) %>% 
  ggplot(aes(x = as.factor(breadwinner))) +
  geom_bar() +
  labs(title = "Personal income = Household income 
       + living apart + widow + single",
       x = "",
       y = "# of responders") +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic()

# Arrange Plots
gridExtra::grid.arrange(g1, g2, g3, g4, ncol = 2)


ggplot(data_clean, aes(x = as.factor(q20))) +
  geom_bar() +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic()

```

```{r}
ggplot(data_copy, aes(x = q19)) +
  geom_bar() +
  labs(title = "Present bias",
       x = "",
       y = "# of responders") +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic() +
  scale_x_continuous(breaks = c(1,2,3,4,5), 
                     labels = c("Now",
                                "3 months",
                                "6 months",
                                "9 months",
                                "12 months"))


##########################
ggplot(data_copy, aes(x = as.factor(demo_age_int))) +
  geom_bar() +
  labs(title = "",
       x = "",
       y = "# of responders") +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic() +
  theme(text = element_text(family = "Garamond", size = 14),
        plot.caption = element_text(size = 11),
        plot.title = element_text(hjust = 0.5),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank()) +
  scale_x_discrete(breaks = c(3,4,5,6,7), 
                     labels = c("18 - 24",
                                "25 - 34",
                                "35 - 44",
                                "45 - 54",
                                "55 - 60"))
########################


ggplot(data_copy, aes(x = as.factor(education))) +
  geom_bar() +
  labs(title = "",
       x = "",
       y = "# of responders") +
  geom_text(aes(label = ..count..), 
            stat = 'count', vjust = -0.5, 
            color = "black", size = 5, 
            family = "Garamond") +
  theme_classic() +
  theme(text = element_text(family = "Garamond", size = 14),
        plot.caption = element_text(size = 11),
        plot.title = element_text(hjust = 0.5),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank())

```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
ggplot(data_copy, aes(x = geosoc6)) +
  geom_bar() +
  labs(title = "What best characterizes your actions after Feb 24th 2022?",
       y = "# of respondents") +
  coord_flip() +
   geom_text(stat = 'count', aes(label = ..count..), hjust = -0.5, color = "black", size = 5, family = "Garamond") +
  theme_classic() +
  theme(plot.title = element_text(family = "Garamond", hjust = 0.5, size = 20),
        plot.caption = element_text(family = "Garamond"),
        axis.text.y = element_text(family = "Garamond", size = 15),
        axis.text.x = element_blank(),
        axis.title.x = element_text(family = "Garamond"),
        axis.title.y = element_blank()) +
  scale_x_continuous(breaks = c(1, 2, 3), labels = c("Stayed", "Left&Returned", "Left"))

ggplot(data_copy, aes(x = demo_oblast)) +
  geom_bar() +
  labs(title = "Oblast BEFORE Feb 24th 2022 (w/o Kyiv)",
       y = "# of respondents") +
  coord_flip() +
   geom_text(stat = 'count', aes(label = ..count..), hjust = -0.5, color = "black", size = 5, family = "Garamond") +
  theme_classic() +
  theme(plot.title = element_text(family = "Garamond", hjust = 0.5, size = 20),
        plot.caption = element_text(family = "Garamond"),
        axis.text.y = element_text(family = "Garamond", size = 15),
        axis.text.x = element_blank(),
        axis.title.x = element_text(family = "Garamond"),
        axis.title.y = element_blank()) +
  scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), 
                   labels = c("Вінницька", "Волинська", "Дніпропетровська", "Донецька", "Житомирська", "Закарпатська", "Запорізька", "Івано-Франківська", "Київська", "Кіровоградська", "Луганська", "Львівська", "м. Київ", "Миколаївська", "Одеська", "Полтавська", "Рівненська", "Сумська", "Тернопільська", "Харківська", "Херсонська", "Хмельницька", "Черкаська", "Чернівецька", "Чернігівська"))

ggplot(data = filter(data_copy, demo_city != "м. Київ"), aes(x = demo_city)) +
  geom_bar() +
  labs(title = "City BEFORE Feb 24th 2022 (w/o Kyiv)",
       y = "# of respondents") +
  coord_flip() +
   geom_text(stat = 'count', aes(label = ..count..), hjust = -0.5, color = "black", size = 4, family = "Garamond") +
  theme_classic() +
    theme(plot.title = element_text(family = "Garamond", hjust = 0.5, size = 20),
        plot.caption = element_text(family = "Garamond"),
        axis.text.x = element_blank(),
        axis.title.x = element_text(family = "Garamond"),
        axis.title.y = element_blank())


ggplot(data_copy, aes(x = oblast_moving)) +
  geom_bar() +
  labs(title = "Oblast AFTER Feb 24th 2022 (w/o Kyiv)",
       y = "# of respondents") +
  coord_flip() +
   geom_text(stat = 'count', aes(label = ..count..), hjust = -0.5, color = "black", size = 5, family = "Garamond") +
  theme_classic() +
  theme(plot.title = element_text(family = "Garamond", hjust = 0.5, size = 20),
        plot.caption = element_text(family = "Garamond"),
        axis.text.y = element_text(family = "Garamond", size = 15),
        axis.text.x = element_blank(),
        axis.title.x = element_text(family = "Garamond"),
        axis.title.y = element_blank()) +
  scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), 
                   labels = c("Вінницька", "Волинська", "Дніпропетровська", "Донецька", "Житомирська", "Закарпатська", "Запорізька", "Івано-Франківська", "Київська", "Кіровоградська", "Луганська", "Львівська", "м. Київ", "Миколаївська", "Одеська", "Полтавська", "Рівненська", "Сумська", "Тернопільська", "Харківська", "Херсонська", "Хмельницька", "Черкаська", "Чернівецька", "Чернігівська"))



```



```{r, warning=FALSE, message=FALSE, echo=FALSE}
plot_war <- dat_unique[,c(23:31,33:36)]

library(PerformanceAnalytics)
chart.Correlation(plot_war, histogram=F)

library(corrr)
library(corrplot)


# Compute the correlation matrix and the p-value matrix
correlation.matrix<-cor(plot_war) 
p.mat <- corrplot::cor.mtest(plot_war, conf.level = 0.95)$p

rownames(correlation.matrix) <- c("Evacuation", 
                               "Occupation", 
                               "Bombing",
                               "Property", 
                               "Physical", 
                               "Emotional", 
                               "Robbery", 
                               "AFU", 
                               "Decease",
                               "Injury", 
                               "Depression", 
                               "Insecurity",
                               "Insomnia")
colnames(correlation.matrix) <- c("Evacuation", 
                               "Occupation", 
                               "Bombing",
                               "Property", 
                               "Physical", 
                               "Emotional", 
                               "Robbery", 
                               "AFU", 
                               "Decease",
                               "Injury", 
                               "Depression", 
                               "Insecurity",
                               "Insomnia")

corrplot(correlation.matrix, method="circle", type="upper", 
         tl.col="black", tl.srt=45, tl.cex=0.7,
         order="hclust", 
         addgrid.col = NA, 
         title="Correlation Matrix", mar=c(0,0,1,0),
         diag=FALSE,
         cl.cex=0.7,
         tl.pos="lt",
         col=colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))(200),
         p.mat = p.mat, # Add the matrix of p-values
         sig.level = 0.05, # Specify the significance level
         insig = "pch",    # Use symbols for significance
         pch.cex = 1.5,    # Size of the symbols
         pch.col = "red",  # Color of the symbols
         signif.legend=TRUE, # Show legend for significance
         legend.pos="bottom", # Position of the legend
         addCoef.col = "black" # Color of the correlation coefficients
         )




stargazer(correlation.matrix,title="Correlation Matrix", 
          type = "text",
          dep.var.labels = c("Evacuation", 
                               "Occupation", 
                               "Bombing",
                               "Property", 
                               "Physical", 
                               "Emotional", 
                               "Robbery", 
                               "AFU", 
                               "Decease",
                               "Injury", 
                               "Depression", 
                               "Insecurity",
                               "Insomnia"))

```

```{r}
plot_discount <- dat_unique[,c(14, 18, 23:37,46, 63)]
ggplot(plot_discount, aes(x = score)) +
  geom_histogram(bins = 18) +
  theme_classic() +
  facet_wrap(~q28_5)

```


## Analysis

```{r, warning=FALSE, message=FALSE, echo=FALSE}
data_war <- dat_unique[,c(23:37,46, 63)]

mod <- lm(score ~ ., data = data_war)
mod_pres <- glm(presbias ~ ., data = dat_unique[,c(23:37, 64)], family = binomial("logit"))
mod_absol <- glm(absolmag ~ ., data = dat_unique[,c(23:37, 65)], family = binomial("logit"))
mod_gainloss <- glm(gainloss ~ ., data = dat_unique[,c(23:37, 66)], family = binomial("logit"))
mod_delay <- glm(delayspeed ~ ., data = dat_unique[,c(23:37, 67)], family = binomial("logit"))

stargazer(mod, mod_pres, mod_absol, mod_gainloss, mod_delay,
          covariate.labels = c("Evacuation", 
                               "Occupation", 
                               "Bombing",
                               "Property damage", 
                               "Physical violence", 
                               "Emotional violence", 
                               "Robbery / Fraud", 
                               "Relative in AFU", 
                               "Loss of a relative", 
                               "Doesn't want to answer",
                               "Physical injury", 
                               "Depression", 
                               "Confidence loss",
                               "Problems with sleep",
                               "None of the above", 
                               "Don't want to answer",
                               "age",
                               "gender",
                               "ind_inc",
                               "debts",
                               "region_war"),
          header=FALSE, 
          title="Regression results", 
          type='text', 
          digits=3,
          style = "aer",
          font.size = "small",
          align = TRUE,
          omit = c("Constant"),
          omit.stat=c("f", "ser"),
          no.space=TRUE)

mod_war_interact <- lm(score ~ q27_1*q28_1+q27_1*q28_2+q27_1*q28_3+q27_1*q28_4+q27_1*q28_5-1, data = data_war)

stargazer(mod_war_interact, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")


```

```{r}
library(gt)

table_temp <- data_copy[,c(2:19, 40:49, 63)] %>%
  pivot_longer(cols = q2:q18, names_to = "Question", values_to = "Response") %>% 
  group_by(Question, demo_gender, Response) %>%
  summarise(Count = n()) %>%
  pivot_wider(names_from = demo_gender, values_from = Count, names_prefix = "Num_") %>%
  mutate(Question = factor(Question, levels = unique(Question))) %>%
  arrange(Question, Response)

table_temp %>% 
  gt(groupname_col = 'Question') %>% 
  cols_label(
    Num_1 = "Female",
    Num_2 = "Male") %>%
  
  tab_spanner(
    label = md("**Gender**"),
    columns = c('Num_1','Num_2')) %>%
  
  tab_header(
    title = 'Table N. Summary Statistics of Temporal Discounting Questions') 



#####
library(doBy)
summaryBy(fwb_war ~ debts, data = dt,
  FUN = function(x) {
c(m = mean(x), s = sd(x))
} )
####
```



# Mediation Analysis

```{r}
require(mediation) #Mediation package
require(rockchalk) #Graphing simple slopes; moderation
require(multilevel) #Sobel Test
require(bda) #Another Sobel Test option
require(gvlma) #Testing Model Assumptions 
require(QuantPsyc)
require(pequod)
```



```{r, warning=FALSE, message=FALSE, echo=FALSE}
data_mediation <- dat_unique[, c(14:18,20:31,33:37,41,43,46,47,50,63:67)]

colnames(data_mediation) <- c("inc_indiv",
                              "inc_house",
                              "fwb_expect",
                              "fwb_war",
                              "fwb_debts",
                              "mh_calm",
                              "mh_energy",
                              "mh_sad",
                              "evacuate", 
                              "occupation", 
                              "bombing",
                              "prop_dmg", 
                              "phys_viol", 
                              "emo_viol", 
                              "robbery", 
                              "fam_afu", 
                              "fam_death", 
                              "phys_injury", 
                              "depression", 
                              "confid_loss",
                              "insom",
                              "no_effect", 
                              "family_stat",
                              "child_live",
                              "gender",
                              "age",
                              "oblast",
                              "score",
                              "presbias",
                              "absolmag",
                              "gainloss",
                              "delayspeed")

data_mediation <- data_mediation %>%  
  mutate(across(everything(), convert_labelled_to_numeric)) %>% 
  mutate(score.c = c(scale(score))) 

#Which mediators correlated with one another?
corr_med <- data_mediation %>% 
  select(fwb_war, fwb_expect, fwb_debts, mh_sad, mh_energy, mh_calm) %>% 
  cor()

corrplot(corr_med, method="number", type="upper")
corrplot::cor.mtest(corr_med, conf.level = 0.95)
p.mat
```

```{r TD ~ FULL}
full_score <- lm(score.c ~ ., data = dt[,-c(1,21:29,32,105)])

full_pres <- glm(presbias ~ ., data = dt[,-c(1,21:29,32,105)], family = binomial("logit"))


full_absol <- glm(absolmag ~ ., data = dt[,-c(1,21:29,32,105)], family = binomial("logit"))

full_gain <- glm(gainloss ~ ., data = dt[,-c(1,21:29,32,105)], family = binomial("logit"))

full_delay <- glm(delayspeed ~ ., data = dt[,-c(1,21:29,32,105)], family = binomial("logit"))

stargazer(full_score, full_pres, full_absol, full_gain, full_delay,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```


```{r TD ~ War}
#Which aspect of war is highly associated with TD?
mod_score <- lm(score.c ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, data = dt)

mod_pres <- glm(presbias ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war +  age + gender, data = dt, family = binomial("logit"))


mod_absol <- glm(absolmag ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, data = dt, family = binomial("logit"))

mod_gain <- glm(gainloss ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, data = dt, family = binomial("logit"))

mod_delay <- glm(delayspeed ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, data = dt, family = binomial("logit"))

stargazer(mod_score, mod_pres, mod_absol, mod_gain, mod_delay,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ War|Kids}
test_no_kids <- lm(score.c ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, subset(dt, no_kids == 1))

test_kids <- lm(score.c ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, subset(dt, no_kids == 0))

stargazer(test_no_kids, 
          test_kids,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ War|Region}
war_td <- lm(score.c ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + age + gender, data = subset(dt, region_war == 1))

no_war_td <- lm(score.c ~ evacuate + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect +  age + gender, data = subset(dt, region_war == 0))

stargazer(war_td, no_war_td,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ FWB}
mod_fwb_score <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, dt)

mod_fwb_pres <- glm(presbias ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, dt, family = binomial("logit"))

mod_fwb_absl <- glm(absolmag ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, dt, family = binomial("logit"))

mod_fwb_gl <- glm(gainloss ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, dt, family = binomial("logit"))

mod_fwb_dl <- glm(delayspeed ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, dt, family = binomial("logit"))

stargazer(mod_fwb_score, 
          mod_fwb_pres, 
          mod_fwb_absl, 
          mod_fwb_gl,  
          mod_fwb_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ FWB|Kids}
fwb_no_kids <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, subset(dt, no_kids == 1))

fwb_kids <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, subset(dt, no_kids == 0))

stargazer(fwb_no_kids, 
          fwb_kids,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ FWB|Debts}
fwb_score_debts <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war, subset(dt, debts == 1))

fwb_score_no_debts <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war, subset(dt, debts == 0))

stargazer(fwb_score_debts, 
          fwb_score_no_debts, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ MH}
mod_mh_td <- lm(score.c ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, dt)

mod_mh_pres <- glm(presbias ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, dt, family = binomial("logit"))

mod_mh_absol <- glm(absolmag ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, dt, family = binomial("logit"))

mod_mh_gl <- glm(gainloss ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, dt, family = binomial("logit"))

mod_mh_dl <- glm(delayspeed ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, dt, family = binomial("logit"))

stargazer(mod_mh_td, 
          mod_mh_pres, 
          mod_mh_absol, 
          mod_mh_gl,  
          mod_mh_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ MH|Kids}
mh_td_kids <- lm(score.c ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, subset(dt, no_kids == 0))

mh_td_no_kids <- lm(score.c ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, subset(dt, no_kids == 1))

stargazer(mh_td_kids, 
          mh_td_no_kids,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Kids}
mod_kid_td <- lm(score.c ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt)

mod_kid_pres <- glm(presbias ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

mod_kid_absol <- glm(absolmag ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

mod_kid_gl <- glm(gainloss ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

mod_kid_dl <- glm(delayspeed ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

stargazer(mod_kid_td, 
          mod_kid_pres, 
          mod_kid_absol, 
          mod_kid_gl,  
          mod_kid_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r LR test for ordinal variables}
#treating ordinal data as continuous
dt <- data_copy[, c(1, 31:34, 37:39)] %>% 
  rename("monthly_inc" = "q21",
         "monthly_house_inc" = "q21_1",
         "fwb_expect" = "q22",
         "fwb_war" = "q23",
         "feel_calm" = "q26_1",
         "feel_energy" = "q26_2",
         "feel_sad" = "q26_3") %>% 
  mutate(
    fwb_expect = case_when(
      fwb_expect == 1 ~ -2,
      fwb_expect == 2 ~ -1,
      fwb_expect == 3 ~ 0,
      fwb_expect == 4 ~ 1,
      fwb_expect == 5 ~ 2),
    fwb_war = case_when(
      fwb_war == 1 ~ -2,
      fwb_war == 2 ~ -1,
      fwb_war == 3 ~ 0,
      fwb_war == 4 ~ 1,
      fwb_war == 5 ~ 2),
    feel_calm = case_when(
      feel_calm == 1 ~ 0,
      feel_calm == 2 ~ 1,
      feel_calm == 3 ~ 2,
      feel_calm == 4 ~ 3,
      feel_calm == 5 ~ 4,
      feel_calm == 6 ~ 5),
    feel_energy = case_when(  
      feel_energy == 1 ~ 0,
      feel_energy == 2 ~ 1,
      feel_energy == 3 ~ 2,
      feel_energy == 4 ~ 3,
      feel_energy == 5 ~ 4,
      feel_energy == 6 ~ 5),
    feel_sad = case_when(
      feel_sad == 1 ~ 0,
      feel_sad == 2 ~ 1,
      feel_sad == 3 ~ 2,
      feel_sad == 4 ~ 3,
      feel_sad == 5 ~ 4,
      feel_sad == 6 ~ 5)) %>% 
  left_join(dt, by = "ResponseId")

mod_ord_test1 <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, data = dt)
mod_ord_test2 <- lm(score.c ~ 
                      inc_5 + inc_20 + inc_40 + inc_60 + inc_80 + inc_100 + finc_5 + 
                      finc_20 + finc_40 + finc_60 + finc_80 + finc_100 +
                      expect_much_better + expect_better + expect_worse + expect_much_worse + 
                      change_much_better + change_better + change_worse + change_much_worse + 
                      debts, data = dt)
mod_ord_test3 <- lm(score.c ~ monthly_inc + monthly_house_inc + debts + fwb_expect + fwb_war + 
                      inc_5 + inc_20 + inc_40 + inc_60 + inc_80 + inc_100 + finc_5 + 
                      finc_20 + finc_40 + finc_60 + finc_80 + finc_100 +
                      expect_much_better + expect_better + expect_worse + expect_much_worse + 
                      change_much_better + change_better + change_worse + change_much_worse + 
                      debts, data = dt)

stargazer(mod_ord_test1,
          mod_ord_test2,
          mod_ord_test3,          
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")

(A <- logLik(mod_ord_test1))
(B <- logLik(mod_ord_test2))
(teststat <- -2 * (as.numeric(A)-as.numeric(B)))
# df=23-7=16
(p.val <- pchisq(teststat, df = 16, lower.tail = FALSE))


#######################################
mod_ord_test1 <- lm(score ~ q21_1, data = dt)
mod_ord_test2 <- lm(score ~ finc_5 + finc_20 + finc_40 + finc_60 + finc_80 + finc_100, data = dt)
mod_ord_test3 <- lm(score ~ q21_1 + finc_5 + finc_20 + finc_40 + finc_60 + finc_80 + finc_100, data = dt)

(A <- logLik(mod_ord_test1))
(B <- logLik(mod_ord_test2))
(teststat <- -2 * (as.numeric(A)-as.numeric(B)))
(p.val <- pchisq(teststat, df = 5, lower.tail = FALSE))
# only here more complex model is preferred - use dummies(!)
#############################################


mod_ord_test4 <- lm(score.c ~ feel_calm + feel_energy + feel_sad, data = dt)
mod_ord_test5 <- lm(score.c ~ 
                      calm_always + calm_more + calm_freq + calm_less + calm_never +
                      energy_always + energy_more + energy_freq + energy_less + energy_never +
                      sad_always + sad_more + sad_freq + sad_less + sad_never, data = dt)
mod_ord_test6 <- lm(score.c ~ 
                      feel_calm + feel_energy + feel_sad + 
                      calm_always + calm_more + calm_freq + calm_less + calm_never +
                      energy_always + energy_more + energy_freq + energy_often + energy_less + energy_never +
                      sad_always + sad_more + sad_freq + sad_less + sad_never, data = dt)


stargazer(mod_ord_test4,
          mod_ord_test5,
          mod_ord_test6,          
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")

(A2 <- logLik(mod_ord_test4))
(B2 <- logLik(mod_ord_test5))
#df=17-5
(teststat2 <- -2 * (as.numeric(A2)-as.numeric(B2)))
(p.val2 <- pchisq(teststat2, df = 12, lower.tail = FALSE))

```

```{r TD ~ MISC1}
mod_m1_td <- lm(score.c ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt)

mod_m1_pres <- glm(presbias ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

mod_m1_absol <- glm(absolmag ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

mod_m1_gl <- glm(gainloss ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

mod_m1_dl <- glm(delayspeed ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

stargazer(mod_m1_td, 
          mod_m1_pres, 
          mod_m1_absol, 
          mod_m1_gl,  
          mod_m1_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Alone}
alone_td <- lm(score.c ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt)

alone_pres <- glm(presbias ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))

alone_absol <- glm(absolmag ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))

####!!!!
alone_gl <- glm(gainloss ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))
####!!!!

alone_dl <- glm(delayspeed ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))

stargazer(alone_td, 
          alone_pres, 
          alone_absol, 
          alone_gl,  
          alone_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Main source}
income_td <- lm(score.c ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt)

income_pres <- glm(presbias ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

income_absol <- glm(absolmag ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

income_gl <- glm(gainloss ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

income_dl <- glm(delayspeed ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

stargazer(income_td, 
          income_pres, 
          income_absol, 
          income_gl,  
          income_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Region}

```


```{r}
# Low R^2 and majority are insignificant


#WAR-MH-TD

#STEP 1
#1. Direct Effect (War on TD)
mod_war_td <- lm(score ~ evacuate - 1, data = data_mediation)

#2.1 Path A (War on MH)
mod_war_mh <- lm(mh_sad ~ evacuate - 1, data = data_mediation)

#3.1 Path B (MH on TD, controlling for War)
mod_mh_td <- lm(score ~ mh_sad - 1, data = data_mediation)

#4.1 Total
mod_total_mh <- lm(score ~ mh_sad + evacuate - 1, data = data_mediation)

stargazer(mod_war_td, mod_war_mh, mod_mh_td,mod_total_mh,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")

#1.1 Direct
mod_war_td <- lm(score ~ evacuate - 1, data = data_mediation)

#2.2 Path C (War on FWB)
mod_war_fwb <- lm(fwb_war ~ evacuate - 1, data = data_mediation)

#3.2 Path D (FWB on TD, controlling for War)
mod_fwb_td <- lm(score ~ fwb_war - 1, data = data_mediation)

#4.1 Total 
mod_total_fwb <- lm(score ~ fwb_war + evacuate - 1, data = data_mediation)

stargazer(mod_war_td, mod_war_fwb, mod_fwb_td,mod_total_fwb,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")


#Path A
sobel(data_mediation$War, data_mediation$MH, data_mediation$score)

#Path B
sobel(data_mediation$War, data_mediation$FWB, data_mediation$score)
```


```{r}
data_med_copy <- data_mediation

convert_labelled_to_numeric <- function(variable) {
  if (inherits(variable, "haven_labelled")) {
    return(as.numeric(as.character(variable)))
  } else {
    return(variable)
  }
}

data_med_copy <- data_med_copy %>% mutate(across(everything(), convert_labelled_to_numeric))

med_full_fit <- lm(score ~ evacuate +
                     fwb_expect + 
                     fwb_war +
                     fwb_debts +
                     mh_sad - 1, 
                   data = data_med_copy)

med_full_fwb_expect <- lm(fwb_expect ~ evacuate - 1, 
                   data = data_med_copy)
  
med_full_fwb_war <- lm(fwb_war ~ evacuate - 1, 
                   data = data_med_copy)


med_full_fwb_debts <- lm(fwb_debts ~ evacuate - 1, 
                   data = data_med_copy)
  
med_full_mh_sad <-  lm(mh_sad ~ evacuate - 1, 
                   data = data_med_copy)
  
stargazer(med_full_fit, 
          med_full_fwb_expect, 
          med_full_fwb_war, 
          med_full_fwb_debts,
          #med_full_mh_sad,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")


```


```{r}
med_fit <- lm(fwb_war ~ evacuate - 1, data = data_med_copy)
out_fit <- lm(score ~ fwb_war + evacuate - 1, data = data_med_copy)

med_out <- mediate(med_fit, out_fit, 
        treat = "evacuate",
        mediator = "fwb_war",
        robustSE = FALSE)


summary(med_out)
```

```{r}
install.packages("bruceR")
library(bruceR)

data_mediation <- bind_cols(data_mediation, dummies)

PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "evacuate", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)

PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "bombing", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)


PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "occupation", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        seed = 4321)

PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "prop_dmg", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)


PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "emo_viol", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)

PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "robbery", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)

PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "fam_death", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)

PROCESS(data = data_mediation, 
        y = "score.c", 
        x = "fam_afu", 
        meds = c("fwb_war", "fwb_expect", "fwb_debts", "mh_sad", "depression", "insom", "confid_loss"),
        med.type = "parallel",
        covs = c("age", "gender", "inc_indiv", "inc_house"),
        nsim = 1000,
        ci = "mcmc",
        seed = 4321)
```


```{r}

```


```{r}
library(UpSetR)
data_venn <- data_mediation[,c(9:22)]
data_venn <- as.data.frame(data_venn)
upset(data_venn, order.by = "freq", sets = c("evacuate", 
                          "occupation", 
                          "bombing",
                          "prop_dmg", 
                          "phys_viol", 
                          "emo_viol", 
                          "robbery", 
                          "fam_afu", 
                          "fam_death", 
                          "phys_injury", 
                          "depression", 
                          "confid_loss",
                          "insom",
                          "no_effect"))
```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
data_emp <- data_full_cat %>% 
  filter(Employment == 1) 

data_unemp <- data_full_cat %>% 
  filter(Employment == 0) 

mod_emp <- lm(score ~ ., data_emp)
mod_unemp <- lm(score ~ ., data_unemp)
stargazer(mod_unemp, mod_emp, 
          header=FALSE, 
          title="unemployed vs empployed", 
          type='text', 
          digits=2,
          font.size = "small",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

Відфільтрував датасет (no NAs) по тим гендеру.
Для жінок Debts є сігніфікант на 0.10, що є дуже сумно.
Але це вже щось!

```{r, warning=FALSE, message=FALSE, echo=FALSE}
data_male <- data_full_cat %>% 
  filter(Gender == 0) 

data_female <- data_full_cat %>% 
  filter(Gender == 1) 

mod_f <- lm(score ~ ., data_female)
mod_m <- lm(score ~ ., data_male)
stargazer(mod_f, mod_m, 
          header=FALSE, 
          title="female vs male", 
          type='text', 
          digits=2,
          font.size = "small",
          align = TRUE,
          omit.stat=c("f", "ser"),
          no.space=TRUE)
```

Відфільтрував датасет (no NAs) по тим хто ніколи не бере кредити.

```{r, warning=FALSE, message=FALSE, echo=FALSE}
data_debts <- data_full_cat %>% 
  filter(Debts == 1) 

data_no_debts <- data_full_cat %>% 
  filter(Gender == 0) 

mod_debts <- lm(score ~ ., data_debts)
mod_no_debts <- lm(score ~ ., data_no_debts)
stargazer(mod_debts, mod_no_debts, 
          header=FALSE, 
          title="No debts vs debts", 
          type='text', 
          digits=2,
          font.size = "small",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

Немає сильного зв\*язку між змінними, як не кручу.

```{r, warning=FALSE, message=FALSE, echo=FALSE}
library(PerformanceAnalytics)
chart.Correlation(data_full_cat[,c(1:3,5:12)], histogram=F)

library(corrr)
library(corrplot)


correlation.matrix<-cor(data_full_cat[,c(1:3,5:12)]) 

stargazer(correlation.matrix,title="Correlation Matrix")
```

```{r}
stargazer(mod, mod_f, mod_m, mod_emp, mod_unemp, mod_poor, mod_rich,
          column.labels = c("Full model", "Female", "Male", "employed", "unemployed", "<20k UAH", "20+k UAH"),
          covariate.labels = c("Income", "Debts", "Year of birth", "Gender", "Employment", "No war experience", "Living in Kyiv now", "Living in Kyiv before 24th", "Fast news", "Slow news", "War experience", "Expects worse", "Expects better", "Expects much worse", "Expects much better", "Expects the same", "Secondary education", "Technical education", "BSc or MSc", "PhD"),
          header=FALSE, 
          title="Regression results", 
          type='text', 
          digits=3,
          style = "aer",
          font.size = "small",
          align = TRUE,
          omit = c("Constant"),
          omit.stat=c("f", "ser"),
          no.space=TRUE)
```

```{r}
data_tobit <- data_full_cat[, c(1:16)]
mod_tobit <- tobit(score ~ ., left = 0, data = data_tobit)
stargazer(mod_tobit,          
          header=FALSE, 
          title="Regression results", 
          type='text', 
          digits=3,
          style = "aer",
          font.size = "small",
          align = TRUE,
          omit = c("Constant"),
          omit.stat=c("f", "ser"),
          no.space=TRUE)


data_t <- data_tobit %>% 
  filter(score > 0)

mod_tibit <- lm(score ~ ., data_t)
stargazer(mod_tibit, mod_tobit, mod,          
          header=FALSE, 
          title="Regression results", 
          type='text', 
          digits=3,
          style = "aer",
          font.size = "small",
          align = TRUE,
          omit = c("Constant"),
          omit.stat=c("f", "ser"),
          no.space=TRUE)


corrplot(cor(data_tobit))
```

```{r}
stargazer(mod, mod_t,
          covariate.labels = c("Income", "Debts", "Year of birth", "Gender", "Employment", "No war experience", "Living in Kyiv now", "Living in Kyiv before 24th", "Fast news", "Slow news", "War experience", "Expects worse", "Expects better", "Expects much worse", "Expects much better", "Expects the same", "Secondary education", "Technical education", "BSc or MSc", "PhD"),
          header=FALSE, 
          title="Regression results", 
          type='text', 
          digits=3,
          style = "aer",
          font.size = "small",
          align = TRUE,
          omit = c("Constant"),
          omit.stat=c("f", "ser"),
          no.space=TRUE)
```

```{r}
graph_anomalies_indiv <- function (dat_grap){
  des4 <- merge(dat_item, dat_grap, by= "ResponseId") %>% 
    group_by(Residence) %>% 
    count(anomaly) %>% 
    mutate(suma = sum(n), prop = n/suma) %>% 
    ggplot(aes(y = prop,
               x = anomaly,
               group = factor(anomaly),
               colour = factor(anomaly))) +
    geom_jitter(alpha = 0.9,
                size = 7,
                pch=19) +
    stat_summary(fun.data = mean_cl_normal, 
                 geom = "pointrange",
                 size = 1, color = "black") +
    theme_bw(base_size = 10) +
    theme(legend.position = "none")+
    ylab("Proportion of decisions") +
    xlab("Type of decision") +
    scale_colour_manual(values=palette_Dark2(length(table(dat_grap$anomaly))),
                        name = "Type of anomaly") +
    ylim(0,1)
  
  
  des5 <- merge(dat_item, dat_grap, by= "ResponseId") %>%
    filter(str_detect(response, 'ongruent')) %>%
    group_by(Residence) %>% 
    count(response) %>% 
    mutate(suma = sum(n), prop = n/suma) %>% 
    ggplot(aes(y = prop,
               x = response,
               group = factor(response),
               colour = factor(response))) +
    geom_jitter(alpha = 0.9,
                size = 7,
                pch = 19) +
    ylim(0,1)+
    stat_summary(fun.data = mean_cl_normal, 
                 geom = "pointrange",
                 size = 1, 
                 color = "black") +
    theme_bw(base_size = 10) +
    theme(legend.position = "none")+
    ylab("Proportion of total anomalies") +
    xlab("Type of anomaly") +
    #ylim(0,800)+
    scale_colour_manual(values=palette_Dark2(length(table(dat_grap$anomaly))),
                        name = "Type of anomaly")
  
  layout <- c(
    area(t = 1, l = 1, b = 6, r = 3),
    area(t = 1, l = 5, b = 8, r = 8))
  
  des6 <- des4 + des5 + 
    plot_layout(design = layout)
  
  return (des6)
  
}


graph_map <- function (data = NULL, var = "var", lowmin = NULL, upplim = NULL, pal = NULL, col = NULL, title = NULL) {
  mp1 <- ggplot(data) +
    geom_sf(aes_string(fill = var)) +
    coord_sf(datum = NA) +
    
    scale_fill_continuous(low="#ba0404", 
                          high="#080887", 
                          limits=c(lowmin,upplim), na.value = "white") +
    #scale_fill_material(col, na.value = "white")+
    bbc_theme() +
    theme(legend.position="bottom",
          legend.text = element_text(size = 15))+
     ggtitle(paste0(title)) + 
    guides(colour = guide_legend(override.aes = list(size = 5))) +  
    theme(legend.key.size = unit(1.5, "cm"))
    
  return(mp1)
}
```


```{r}
library(dplyr)
library(tidyverse)
library(readr)
library(haven)
library(autostsm)
require(data.table)
library(readxl)
library(lubridate)

library(shiny)
library(leaflet)
library(rgdal)
library(ggplot2)
library(jsonlite)
library(stringr)   
library(sp)
library(RColorBrewer)

```

## Ukraine regional map


```{r}
#load the original file
cons <- read_csv("gtrendsdata.csv")

# consumer index
consumer_index <- cons %>%
  group_by(geo, date) %>%
  summarise(consumer_index = sum(hits)) %>%
  ungroup()
region_names <- data.frame(
  geo = c("UA-71", 
          "UA-74", 
          "UA-77", 
          "UA-12", 
          "UA-14", 
          "UA-26", 
          "UA-63",
          "UA-65",
          "UA-68",
          "UA-32", 
          "UA-35", 
          "UA-09",
          "UA-46",
          "UA-48",
          "UA-51",
          "UA-53",
          "UA-56",
          "UA-59",
          "UA-61",
          "UA-05",
          "UA-07",
          "UA-21",
          "UA-23",
          "UA-18",
          "UA-30",
          "UA-40",
          "UA-43"),
  region = c("Cherkasy", 
             "Chernihiv", 
             "Chernivtsi", 
             "Dnipropetrovsk", 
             "Donetsk", 
             "Ivano-Frankivsk", 
             "Kharkiv", 
             "Kherson", 
             "Khmelnytskyi", 
             "Kiev", 
             "Kirovohrad", 
             "Luhansk", 
             "Lviv", 
             "Mykolaiv", 
             "Odessa", 
             "Poltava", 
             "Rivne", 
             "Sumy", 
             "Ternopil", 
             "Vinnytsia", 
             "Volyn", 
             "Zakarpattia",
             "Zaporizhia",
             "Zhytomyr", 
             "Kyiv City", 
             "Sevastopol' city", 
             "Crimea")
)
consumer_index <- consumer_index %>%
  left_join(region_names, by = "geo") %>%
  select(-geo)

consumer_index$date <- as.Date(consumer_index$date, format = "%Y-%m-%d") 

consumer_index_wider <- consumer_index %>% 
  pivot_wider(names_from = "region", values_from = c("consumer_index"))

rownames(consumer_index_wider) <- consumer_index_wider$date
row_names <- rownames(consumer_index_wider)
consumer_index_wider$date <- NULL

# transpose the dataframe
consumer_index_wider_trans <- t(consumer_index_wider)

consumer_index_clean <- as.data.frame(consumer_index_wider_trans)
colnames(consumer_index_clean) <- row_names
consumer_index_clean <- consumer_index_clean %>% rownames_to_column("id")

consumer_index_clean <- consumer_index_clean %>%
  mutate(id = ifelse(id == "Zaporizhia", "Zaporizhzhia", ifelse(
    id == "Kiev", "Kyiv", id))) %>% 
  rename(oblast = id)

map <- readOGR("~data/stanford-ukraine.json")

df <- fortify(map)
#  
# # Convert numeric strings to text
df <- df %>%
    mutate(id = as.character(id),
      id = case_when(
      id == 0 ~ "Cherkasy",
      id == 1 ~ "Chernihiv",
    id == 2 ~ "Chernivtsi",
      id == 3 ~ "Crimea",
      id == 4 ~ "Dnipropetrovsk",
      id == 5 ~ "Donetsk",
      id == 6 ~ "Kharkiv",
      id == 7 ~ "Kherson",
      id == 8 ~ "Khmelnytskyi",
      id == 9 ~ "Kyiv City",
      id == 10 ~ "Kyiv",
      id == 11 ~ "Kirovohrad",
      id == 12 ~ "Lviv",
      id == 13 ~ "Luhansk",
    id == 14 ~ "Mykolaiv",
      id == 15 ~ "Odessa",
      id == 16 ~ "Poltava",
    id == 17 ~ "Rivne",
      id == 18 ~ "Sevastopol' City",
      id == 19 ~ "Sumy",
      id == 20 ~ "Ivano-Frankivsk",
    id == 21 ~ "Ternopil",
    id == 22 ~ "Zakarpattia",
      id == 23 ~ "Vinnytsia",
      id == 24 ~ "Volyn",
      id == 25 ~ "Zaporizhzhia",
      id == 26 ~ "Zhytomyr",
      TRUE ~ "Unknown"
    )
)

df <- df %>% 
    rename(oblast = id)

merged <- left_join(df, consumer_index_clean, by = "oblast")
new_attributes <- merged[,-c(1:5,7)] %>% 
  distinct()

# Function to rename columns using gsub()
rename_columns <- function(df, pattern, replacement) {
  colnames(df) <- gsub(pattern, replacement, colnames(df))
  return(df)
}

# Rename the columns using gsub()
new_attributes <- rename_columns(new_attributes, "\\-", "_")
```

```{r map}
# library(leaflet)
# library(rgdal)
# library(jsonlite)
# library(stringr)   
# library(sp)
# library(sf)
# 
# map <- readOGR("data/stanford-ukraine.json")
# 
# map@data[["name_1"]] <- unique(data_clean$region_before_en)
# map@data <- left_join(map@data, data_clean$geo, by = c("name_1" = "geo"))
# 
# 
# #map@data <- cbind(map@data, newer_attributes)
```

```{r}
# Survey answers deciphered

# oblast_before - Де Ви проживали до 24 лютого 2022 року?
#...

# geosoc6 - Що найкраще описує Ваші дії після початку повномасштабного вторгнення 24 лютого 2022 року?

# 1 - Я залишився(лась) в своєму місті (те, в якому проживав до 24.02.2022) 
# 2 - Я покинув(ла) своє місто (те, в якому проживав до 24.02.2022) і вже повернувся(лась) до цього міста назад
# 3 - Я покинув(ла) своє місто (те, в якому проживав до 24.02.2022) і НЕ повернувся(лась) до цього міста назад


# geosoc7 - Куди Ви переїждали після початку повномасштабного вторгнення (після 24 лютого 2022 року)? (якщо Ви переїжджали кілька разів, виберіть варіант, де Ви залишалися найдовше)
# 1 - В межах моєї області
# 2 - В іншу область України
# 3 - За кордон


# oblast_moving - До якої області Ви переїжджали після початку повномасштабного вторгнення (після 24 лютого 2022 року)?
#...

# geosoc9 - До якої країни Ви переїждали після початку повномасштабного вторгнення (після 24 лютого 2022 року?
# 1 - Польша
# 2 - Німеччина
# 3 - Чехія
# 4 - Інша

# geosoc10 - Чи плануєте Ви повернутись в Україну?
# 1 - Так, планую
# 2  - Ні, не планую
# 3 - Ще не визначився(лась)


# q21 - Який Ваш індивідуальний середній місячний дохід у 2023 році (усі джерела)?
# 1 - Менше 5 000 грн
# 2 - 5 000 - 19 999 грн
# 3 - 20 000 - 39 999 грн
# 4 - 40 000 - 59 999 грн
# 5 - 60 000 - 79 999 грн
# 6 - Більше 80 000 грн
# 7 - Не хочу відповідати

# q21_1 - Який Ваш сімейний середній місячний дохід у 2023 році (усі джерела)?
# 1 - Менше 5 000 грн
# 2 - 5 000 - 19 999 грн
# 3 - 20 000 - 39 999 грн
# 4 - 40 000 - 59 999 грн
# 5 - 60 000 - 79 999 грн
# 6 - Більше 80 000 грн
# 7 - Не хочу відповідати

# q22 - Які Ваші очікування щодо власного фінансового становища на наступні 12 місяців? Я очікую що…
# 1 - Буде набагато гірше, ніж зараз
# 2 - Буде дещо гірше, ніж зараз
# 3 - Буде приблизно так само
# 4 - Буде дещо краще, ніж зараз
# 5 - Буде набагато краще, ніж зараз
 
# q23 - Загалом, враховуючи вплив повномаштабної війни, як змінилося Ваше фінансове становище протягом війни, порівняно з початком 2022 року?
# 1 - Суттєво погіршилось
# 2 - Дещо погіршилось
# 3 - Ніяк не змінилось
# 4 - Дещо покращилось
# 5 - Суттєво покращилось

# q24 - Чи є у Вас наразі будь-які фінансові зобов'язання (оплата по кредиту, аліменти, штрафи, іпотека, розстрочка, кредитний ліміт тощо), які Вам необхідно сплатити?
# Так, є
# Ні, немає

# q25 - Яку частину Ваших місячних доходів Ви витрачаєте на виплату фінансових зобов'язань?
# 1 - Меншу частину
# 2 - Половину
# 3 - Більшу частину

# q26_1 - Скільки часу протягом останніх чотирьох тижнів Ви почувалися спокійним(ою)?
# 1 - Весь час
# 2 - Більшу частину часу
# 3 - Досить часто
# 4 - Іноді
# 5 - Меншу частину часу
# 6 - Зовсім не почувався(лась) спокійним(ою)
 
# q26_2 - Скільки часу протягом останніх чотирьох тижнів Ви почувалися сповненими енергії?
# 1 - Весь час
# 2 - Більшу частину часу
# 3 - Досить часто
# 4 - Іноді
# 5 - Меншу частину часу
# 6 - Зовсім не почувався(лась) сповненим(ою) енергією
 
# q26_3 - Скільки часу протягом останніх чотирьох тижнів Ви почувалися пригнічено?
# 1 - Весь час
# 2 - Більшу частину часу
# 3 - Досить часто
# 4 - Іноді
# 5 - Меншу частину часу
# 6 - Зовсім не почувався(лась) пригніченим(ою)

#q27_intro - Наступні запитання стосуються Вашого досвіду повномасштабної війни. Вони можуть бути досить чутливими для деяких людей. Ваші відповіді дуже важливі для нас, і якщо Ви не хочете відповідати на них, то можете обрати "Не хочу відповідати"

# q27 - Виберіть усе, з чим Ви стикалися з початку повномасштабної війни?

# q27_1 - Евакуація
# q27_2 - Життя на окупованій території
# q27_3 - Стрілянина / бомбардування / ракетні атаки
# q27_4 - Пошкодження власного майна внаслідок бойових дій
# q27_5 - Фізичне насилля зі зброєю або без неї
# q27_6 - Емоційне насилля (погроза фізичної розправи, приниження, залякування)
# q27_7 - Пограбування, крадіжка або шахрайство
# q27_8 - Служба близької людини у складі Сил оборони України (ЗСУ, Нацгвардія)
# q27_9 - Втрата близької людини (родича, друга) внаслідок військової агресії росії
# q27_10 - Не хочу відовідати

# q28 - Чи страждали Ви від будь-якої з наведених нижче проблем, що виникли після початку війни в лютому 2022 року?

# q28_1 - Тілесні ушкодження (поранення, переломи тощо)
# q28_2 - Депресія, тривога або панічні атаки
# q28_3 - Втрата впевненості в собі, відчуття вразливості
# q28_4 - Труднощі зі сном та / або концентрацією
# q28_5 - Жоден з вищеперелічених варіантів
# q28_6 - Не хочу відповідати

# q39 - На Вашу думку, як довго триватимуть активні бойові дії в Україні?
# 1 - До кінця осені 2023
# 2 - До зими 2023-2024
# 3 - До кінця 2024 року
# 4 - Активні бойові дії розтягнуться на роки
# 5 - Інше
# 6 - Важко відповісти

# geosoc1 - Який Ваш сімейний статус?
# 1 - Неодружений / незаміжня
# 2 - Одружений / заміжня і проживаю РАЗОМ з чоловіком / дружиною
# 3 - Одружений / заміжня і зараз проживаю з чоловіком / дружиною ОКРЕМО
# 4 - Цивільний шлюб
# 5 - Розлучений / розлучена
# 6 - Вдівець / вдова
# 7 - Не хочу відповідати

# geosoc2 - Чи є у Вас діти?
# 1 - Так, є тільки діти до 18 років
# 2 - Так, є тільки повнолітні (старше 18 років) діти
# 3 - Так, є як повнолітні, так і неповнолітні діти
# 4 - Ні, але наразі очікуємо на появу
# 5 - Ні, немає дітей

# geosoc3 - Чи проживаєте Ви разом зі своїми неповнолітніми дітьми?
# 1 - Проживаю разом з усіма своїми неповнолітніми дітьми
# 2 - Проживаю разом з деякими своїми неповнолітніми дітьми, не з усіма
# 3 - Не проживаю разом зі своїми неповнолітніми дітьми
# 4 - Інше



```
