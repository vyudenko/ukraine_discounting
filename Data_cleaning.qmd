---
title: "Data cleaning & Analysis"
author: "Vadym Yudenko"
format: 
  html:
    self-contained: true
    toc: true
    toc-location: right 
    toc-title: Contents 
    number-sections: false
editor: visual
---

# Setup

```{r libraries, warning=FALSE, message=FALSE, echo=FALSE}
# Create a vector of packages to be loaded
if (!require("lattice")) install.packages("lattice")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("broom")) install.packages("broom")
if (!require("likert")) install.packages("likert")
if (!require("MASS")) install.packages("MASS")
if (!require("psych")) install.packages("psych")
if (!require("viridis")) install.packages("viridis")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggrepel")) install.packages("ggrepel")
if (!require("here")) install.packages("here")
if (!require("flextable")) install.packages("flextable")
if (!require("remotes")) install.packages("remotes")
if (!require("patchwork")) install.packages("patchwork")
if (!require("gt")) install.packages("gt")
if (!require("ggExtra")) install.packages("ggExtra")
if (!require("ggthemes")) install.packages("ggthemes")
if (!require("gtsummary")) install.packages("gtsummary")
if (!require("hrbrthemes")) install.packages("hrbrthemes")
if (!require("stargazer")) install.packages("stargazer")
if (!require("fastDummies")) install.packages("fastDummies")
if (!require("haven")) install.packages("haven")
if (!require("sjPlot")) install.packages("sjPlot")
if (!require("sjmisc")) install.packages("sjmisc")
if (!require("nlme")) install.packages("nlme")
if (!require("effects")) install.packages("effects")
if (!require("mediation")) install.packages("mediation")
if (!require("rockchalk")) install.packages("rockchalk")
if (!require("multilevel")) install.packages("multilevel")
if (!require("bda")) install.packages("bda")
if (!require("gvlma")) install.packages("gvlma")
if (!require("QuantPsyc")) install.packages("QuantPsyc")
if (!require("pequod")) install.packages("pequod")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("car")) install.packages("car")

```

```{r functions}
#######################################
######### Stats-related functions #####
#######################################

get_scores <- function (x) {
  
  ## This function will compute the total temporal discount for each participant based on their responses to each block question
  ##
  ## Input (x): A block of questions (5 previous questions to the one parsed to the function)
  ##
  ## Output: Vector of individual sum responses per block
  
  f <- as.numeric(gsub("block", "", x$block))[1]
  
  if (f == 1) {
    x %>% 
      mutate(score = case_when(
        amount_later == 750 & choice == 0 ~ 5,
        amount_later == 750 & choice == 1 ~ 4,
        amount_later == 600 & choice == 1 ~ 3,
        amount_later == 510 & choice == 0 ~ 2,
        amount_later == 505 & choice == 0 ~ 1,
        amount_later == 505 & choice == 1 ~ 0
      ))
    
  } else if (f == 2) {
    x %>% 
      mutate(score = case_when(
        amount_later == 750 & choice == 1 ~ 0,
        amount_later == 750 & choice == 0 ~ 1,
        amount_later == 600 & choice == 0 ~ 2,
        amount_later == 510 & choice == 1 ~ 3,
        amount_later == 505 & choice == 0 ~ 5,
        amount_later == 505 & choice == 1 ~ 4
      ))
  } else {
    x %>% 
      mutate(score = case_when(
        amount_later == 7500 & choice == 0 ~ 5,
        amount_later == 7500 & choice == 1 ~ 4,
        amount_later == 6000 & choice == 1 ~ 3,
        amount_later == 5100 & choice == 0 ~ 2,
        amount_later == 5050 & choice == 0 ~ 1,
        amount_later == 5050 & choice == 1 ~ 0
      ))
  }
}



get_latest_answer <- function (x, y){
  
  ## This function will obtain the latest answer given to the initial baseline questions. This function is necessary to control for the different possible options shown to each individual.
  ##
  ## Input: (x) A data frame including choices to questions; (y) a scalar identifying the next item following the item block. 
  ##
  ## Output: Vector of individual responses to the anomaly item
  
  x %>% 
    group_by(ResponseId) %>% 
    filter(as.numeric(gsub("Q", "", question)) < y) %>% 
    arrange(desc(as.numeric(gsub("Q", "", question)))) %>% 
    slice(1) %>% 
    ungroup() %>% 
    arrange(ResponseId) %>% 
    dplyr:::select(ResponseId, choice, amount_later, block) 
}

get_second_choices <- function (x, y) {
  
  ## This function will obtain the answer given to the anomalies questions. This function necessary to control for the different possible options shown to each individual
  ##
  ## Input: (x) A data frame including choices to questions; (y) the anomaly item identifier. 
  ##
  ## Output: Vector of individual responses to the anomaly item
  
  x %>% 
    arrange(ResponseId) %>%   
    arrange(desc(as.numeric(gsub("Q", "", question)))) %>%   
    filter(question == y) %>% 
    dplyr:::select(choice) %>% 
    unlist() %>% 
    as.vector()
}


fixer_anom <- function (d, type = NULL){
  
  ## This function will compute whether an anomaly was observed (and whether the initial answer was a sooner or later decision) and if the possible anomaly was congruent with theory or not.
  ##
  ## Input: (x) A data frame including the first choice (fc) and the type of anomaly to be estimated. 
  ##
  ## Output: dataframe including the individual id and the variables response (possible anomaly and initial decision) and anomaly (whether an anomaly or a consistent decision was observed).
  
  if (type == "presbias" || type == "absolmag" || type == "delay") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "No anomaly sooner",
        fc == 1 & sc == 0 ~ "Anomaly later",
        fc == 0 & sc == 1 ~ "Anomaly sooner",
        fc == 1 & sc == 1 ~ "No anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>%
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>% 
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  } else if (type == "gainloss") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "Anomaly sooner",
        fc == 1 & sc == 0 ~ "No anomaly later",
        fc == 0 & sc == 1 ~ "No anomaly sooner",
        fc == 1 & sc == 1 ~ "Anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>% 
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>%
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  }  else if (type == "subaddit") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "No anomaly sooner",
        fc == 0 & sc == 1 ~ "Anomaly sooner",
        fc == 1 & sc == 1 ~ "Inconsistent",
        fc == 1 & sc == 0 ~ "Inconsistent",
        fc == 2 & sc == 0 ~ "Anomaly later",
        fc == 2 & sc == 1 ~ "No anomaly later",
      )) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent",
        response ==  "Inconsistent" ~ "Inconsistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly", "Inconsistent")) %>% 
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>%
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type)  
    
  }
} 

fixer_anoms <- function (d, type = NULL){
  
  ## This function will compute whether an anomaly was observed (and whether the initial answer was a sooner or later decision) and if the possible anomaly was congruent with theory or not.
  ##
  ## Input: (x) A data frame including the first choice (fc) and the type of anomaly to be estimated. 
  ##
  ## Output: dataframe including the individual id and the variables response (possible anomaly and initial decision) and anomaly (whether an anomaly or a consistent decision was observed).
  
  if (type == "presbias" || type == "absolmag" || type == "delay") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "No anomaly sooner",
        fc == 1 & sc == 0 ~ "Anomaly later",
        fc == 0 & sc == 1 ~ "Anomaly sooner",
        fc == 1 & sc == 1 ~ "No anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>%
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>% 
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  } else if (type == "gainloss") {  
    
    d %>%
      mutate(response = case_when (
        fc == 0 & sc == 0 ~ "Anomaly sooner",
        fc == 1 & sc == 0 ~ "No anomaly later",
        fc == 0 & sc == 1 ~ "No anomaly sooner",
        fc == 1 & sc == 1 ~ "Anomaly later")) %>% 
      mutate (response = as.factor(response)) %>% 
      mutate(anomaly = case_when(
        response == "Anomaly later" ~ "Possible anomaly",
        response == "Anomaly sooner" ~ "Possible anomaly",
        response == "No anomaly later" ~ "Consistent",
        response == "No anomaly sooner" ~ "Consistent"
      )) %>% 
      mutate(anomaly = fct_relevel(anomaly, "Consistent", "Possible anomaly")) %>% 
      mutate(response = fct_recode(response, 
                                   "Congruent" = "Anomaly sooner", 
                                   "Not congruent" = "Anomaly later")) %>%
      mutate(type = rep(type, length(response))) %>% 
      dplyr:::select(ResponseId, response, anomaly, type) 
    
  } 
} 


convert_labelled_to_numeric <- function(variable) {
  if (inherits(variable, "haven_labelled")) {
    return(as.numeric(as.character(variable)))
  } else {
    return(variable)
  }
}

# Fixing temporal discounting answers 

change_values <- function(x) {
  x[x == 1] <- 0
  x[x == 2] <- 1
  return(x)
}


# SOURCE: https://cimentadaj.github.io/blog/2016-08-22-producing-stargazer-tables-with-odds-ratios-and-standard-errors-in-r/producing-stargazer-tables-with-odds-ratios-and-standard-errors-in-r/
stargazer2 <- function(model, odd.ratio = F, ...) {
  if(!("list" %in% class(model))) model <- list(model)
    
  if (odd.ratio) {
    coefOR2 <- lapply(model, function(x) exp(coef(x)))
    seOR2 <- lapply(model, function(x) exp(coef(x)) * summary(x)$coef[, 2])
    p2 <- lapply(model, function(x) summary(x)$coefficients[, 4])
    stargazer(model, coef = coefOR2, se = seOR2, p = p2, ...)
    
  } else {
    stargazer(model, ...)
  }
}
```

```{r loading data}
data <- read_sav("data/gradus_data.sav")

colnames(data)[colnames(data) == "intnr"] <- "ResponseId"
data <- data[, -c(2,41,60)]

data_copy <- data %>% 
  relocate(c(q12, q13), .after = q18) %>% 
  rename(temp_q17 = "q12",
         temp_q18 = "q13",
         temp_q12 = "q14",
         temp_q13 = "q15",
         temp_q14 = "q16",
         temp_q15 = "q17",
         temp_q16 = "q18") %>% 
  rename(q17 = "temp_q17",
         q18 = "temp_q18",
         q12 = "temp_q12",
         q13 = "temp_q13",
         q14 = "temp_q14",
         q15 = "temp_q15",
         q16 = "temp_q16")


data_copy[, c(2:18, 35)] <- lapply(data_copy[, c(2:18, 35)], change_values)

air_alarms <- data.frame(
  City = c("Donetsk", "Kharkiv", "Zaporizhzhia", "Dnipro", "Kyiv", 
           "Mykolaiv", "Kirovohrad", "Poltava", "Sumy", "Cherkasy", 
           "Kherson", "Chernihiv", "Odesa", "Zhytomyr", "Vinnytsia", 
           "Khmelnytskyi", "Volyn", "Rivne", "Ternopil", 
           "Ivano-Frankivsk", "Lviv", "Chernivtsi", "Zakarpatska", "Luhansk"),
  Alarms = c(5364, 2789, 2752, 2439, 2189, 2145, 1854, 1633, 1327, 
             1086, 1027, 984, 947, 888, 728, 606, 510, 496, 460, 
             427, 426, 378, 353, NA)
)

# Adjust the city names in air_alarms to match the oblast_before_en in dt
air_alarms$oblast_before_en <- ifelse(air_alarms$City == "Kyiv", "Kyiv City", paste(air_alarms$City, "Region"))

inflation_data <- data.frame(
  oblast = c('Україна', 'Вінницька', 'Волинська', 'Дніпропетровська', 'Донецька', 'Житомирська', 
             'Закарпатська', 'Запорізька', 'Івано-Франківська', 'Київська', 'Кіровоградська', 'Луганська',
             'Львівська', 'Миколаївська', 'Одеська', 'Полтавська', 'Рівненська', 'Сумська', 'Тернопільська',
             'Харківська', 'Херсонська', 'Хмельницька', 'Черкаська', 'Чернівецька', 'Чернігівська', 'м.Київ'),
  jan = c(100.8, 100.4, 100.7, 100.9, 100.8, 101.3, 100.9, 100.9, 101.1, 101.0, 100.8, 100.8, 
             101.0, 100.8, 101.2, 100.5, 100.7, 100.2, 100.7, 101.4, 99.4, 100.8, 100.5, 100.8, 100.8, 100.6),
  feb = c(100.7, 100.6, 100.9, 100.6, 100.7, 100.1, 101.1, 100.7, 100.7, 100.2, 100.8, 100.7,
            101.0, 100.7, 100.7, 100.3, 100.8, 101.1, 100.6, 99.9, 99.9, 100.4, 100.5, 101.0, 100.3, 101.0),
  mar = c(101.5, 101.2, 101.0, 101.6, 101.5, 101.2, 101.8, 101.6, 101.1, 101.2, 101.5, 101.5, 
               101.2, 101.9, 101.7, 101.7, 101.1, 101.4, 101.1, 101.9, 101.2, 101.5, 101.3, 101.2, 101.4, 102.4),
  apr = c(100.2, 99.8, 100.1, 100.4, 100.3, 100.4, 100.0, 100.4, 100.1, 100.3, 100.4, 100.3,
              99.8, 100.3, 100.4, 100.1, 100.0, 99.8, 99.9, 100.4, 100.4, 100.2, 100.1, 100.3, 100.5, 100.1),
  may = c(100.5, 100.3, 100.2, 100.1, 100.5, 100.3, 100.2, 100.6, 100.4, 100.4, 100.6, 100.5,
              100.3, 100.6, 100.3, 100.1, 100.3, 100.4, 100.3, 100.1, 100.9, 100.7, 100.5, 100.3, 99.8, 101.5),
  jun = c(100.8, 100.8, 101.1, 100.9, 100.8, 101.3, 100.3, 101.2, 101.2, 100.7, 100.5, 100.7,
              101.1, 100.8, 101.1, 100.3, 100.9, 100.4, 100.6, 100.9, 100.9, 100.7, 100.9, 100.3, 100.4, 100.7),
  jul = c(99.4, 98.9, 99.3, 99.1, 99.7, 99.0, 99.6, 99.4, 99.1, 99.8, 99.6, 99.6, 98.8, 99.5, 98.9, 99.6, 99.5, 99.2, 99.0, 100.2, 99.7, 99.8, 100.1, 99.1, 99.5, 99.0),
  aug = c(98.6, 99.4, 99.1, 98.8, 98.4, 99.2, 98.9, 98.8, 98.6, 99.6, 98.9, 98.6, 98.8, 97.8, 98.0, 98.7, 99.0, 98.9, 99.4, 98.2, 98.1, 99.5, 99.4, 98.6, 99.3, 97.5),
  sep = c(100.5, 101.4, 102.4, 102.4, 102.7, 102.8, 102.8, 103.6, 102.3, 103.2, 103.1, 102.7, 102.0, 102.4, 102.3, 101.3, 102.3, 101.4, 101.6, 103.0, 100.5, 103.6, 103.3, 101.6, 102.0, 102.8),
  year = c(103.0, 101.4, 102.4, 102.4, 102.7, 102.8, 102.8, 103.6, 102.3, 103.2, 103.1, 102.7, 102.0, 102.4, 102.3, 101.3, 102.3, 101.4, 101.6, 103.0, 100.5, 103.6, 103.3, 101.6, 102.0, 102.8)
)

# Mapping between Ukrainian names and English names
mapping <- data.frame(
  oblast = c('Донецька', 'Харківська', 'Запорізька', 'м.Київ', 'Миколаївська', 
             'Кіровоградська', 'Полтавська', 'Сумська', 'Черкаська', 'Херсонська', 
             'Чернігівська', 'Одеська', 'Житомирська', 'Вінницька', 'Хмельницька', 
             'Волинська', 'Рівненська', 'Тернопільська', 'Івано-Франківська', 'Львівська', 
             'Чернівецька', 'Луганська', 'Закарпатська', 'Київська', 'Дніпропетровська'),
  oblast_before_en = c('Donetsk Region', 'Kharkiv Region', 'Zaporizhzhia Region', 'Kyiv City', 
                       'Mykolaiv Region', 'Kirovohrad Region', 'Poltava Region', 'Sumy Region', 
                       'Cherkasy Region', 'Kherson Region', 'Chernihiv Region', 'Odesa Region', 
                       'Zhytomyr Region', 'Vinnytsia Region', 'Khmelnytskyi Region', 'Volyn Region', 
                       'Rivne Region', 'Ternopil Region', 'Ivano-Frankivsk Region', 'Lviv Region', 
                       'Chernivtsi Region', 'Luhansk Region', 'Zakarpattia Region', 'Kyiv Region', 
                       'Dnipropetrovsk Region')
)
```

```{r data prep}
data_clean <- data_copy %>%
  mutate(oblast_before_ua = as.character(as_factor(demo_oblast)),
         oblast_before_en = fct_recode(oblast_before_ua,
                                    "Vinnytsia Region" = "Вінницька область",
                                    "Volyn Region" = "Волинська область",
                                    "Dnipropetrovsk Region" = "Дніпропетровська область",
                                    "Donetsk Region" = "Донецька область",
                                    "Zhytomyr Region" = "Житомирська область",
                                    "Zakarpattia Region" = "Закарпатська область",
                                    "Zaporizhzhia Region" = "Запорізька область",
                                    "Ivano-Frankivsk Region" = "Івано-Франківська область",
                                    "Kyiv City" = "м. Київ",
                                    "Kyiv Region" = "Київська область",
                                    "Kirovohrad Region" = "Кіровоградська область",
                                    "Luhansk Region" = "Луганська область",
                                    "Lviv Region" = "Львівська область",
                                    "Mykolaiv Region" = "Миколаївська область",
                                    "Odesa Region" = "Одеська область",
                                    "Poltava Region" = "Полтавська область",
                                    "Rivne Region" = "Рівненська область",
                                    "Sumy Region" = "Сумська область",
                                    "Ternopil Region" = "Тернопільська область",
                                    "Kharkiv Region" = "Харківська область",
                                    "Kherson Region" = "Херсонська область",
                                    "Khmelnytskyi Region" = "Хмельницька область",
                                    "Cherkasy Region" = "Черкаська область",
                                    "Chernivtsi Region" = "Чернівецька область",
                                    "Chernihiv Region" = "Чернігівська область"),
         region_before_ua = as.character(as_factor(demo_region)),
         region_before_en = fct_recode(region_before_ua,
                                       "Kyiv City" = "Київ",
                                       "South" = "Південний",
                                       "Center" = "Центральний",
                                       "West" = "Західний",
                                       "North" = "Північний",
                                       "East" = "Східний"),
         city_before_ua = as.character(as_factor(demo_city)),
         city_before_en = fct_recode(city_before_ua,
                                        "Kyiv" = "м. Київ",
                                        "Kherson" = "Херсон",
                                        "Cherkasy" = "Черкаси",
                                        "Mukachevo" = "Мукачево",
                                        "Korosten" = "Коростень",
                                        "Shostka" = "Шостка",
                                        "Kremenchuk" = "Кременчук",
                                        "Energodar" = "Енергодар",
                                        "Boryspil" = "Бориспіль",
                                        "Pryluky" = "Прилуки",
                                        "Zhytomyr" = "Житомир",
                                        "Nikopol" = "Нікополь",
                                        "Druzhkivka" = "Дружківка",
                                        "Zaporizhzhia" = "Запоріжжя",
                                        "Kamianske" = "Кам'янське",
                                        "Khmelnytskyi" = "Хмельницький",
                                        "Kropyvnytskyi" = "Кропивницький",
                                        "Kharkiv" = "Харків",
                                        "Odesa" = "Одеса",
                                        "Lviv" = "Львів"),
         city_size_before_ua = as.character(as_factor(demo_сity_size)),
         cit_size_before_en = fct_recode(city_size_before_ua,
                                         "1 mil.+" = "1 млн.+",
                                         "500k-1 mil." = "500-1 млн.",
                                         "100k-500k" = "100-500 тис.",
                                         "50k-100k" = "50-100 тис."),
         oblast_moving_ua = as.character(as_factor(oblast_moving)),
         oblast_moving_en = fct_recode(oblast_moving_ua,
                                    "Vinnytsia Region" = "Вінницька область",
                                    "Volyn Region" = "Волинська область",
                                    "Dnipropetrovsk Region" = "Дніпропетровська область",
                                    "Donetsk Region" = "Донецька область",
                                    "Zhytomyr Region" = "Житомирська область",
                                    "Zakarpattia Region" = "Закарпатська область",
                                    "Zaporizhzhia Region" = "Запорізька область",
                                    "Ivano-Frankivsk Region" = "Івано-Франківська область",
                                    "Kyiv City" = "м. Київ",
                                    "Kyiv Region" = "Київська область",
                                    "Kirovohrad Region" = "Кіровоградська область",
                                    "Luhansk Region" = "Луганська область",
                                    "Lviv Region" = "Львівська область",
                                    "Mykolaiv Region" = "Миколаївська область",
                                    "Odesa Region" = "Одеська область",
                                    "Poltava Region" = "Полтавська область",
                                    "Rivne Region" = "Рівненська область",
                                    "Sumy Region" = "Сумська область",
                                    "Ternopil Region" = "Тернопільська область",
                                    "Kharkiv Region" = "Харківська область",
                                    "Kherson Region" = "Херсонська область",
                                    "Khmelnytskyi Region" = "Хмельницька область",
                                    "Cherkasy Region" = "Черкаська область",
                                    "Chernivtsi Region" = "Чернівецька область",
                                    "Chernihiv Region" = "Чернігівська область"),
         city_moving_en = fct_recode(city_moving,
                                        "Drohobych" = "Дрогобич",
                                        "Lutsk" = "Луцьк",
                                        "Ivano-Frankivsk" = "Івано-Франківськ",
                                        "Vinnytsia" = "Вінниця",
                                        "Lviv" = "Львів",
                                        "Kyiv" = "м. Київ",
                                        "Resided in village / settlement" = "Проживав(ла) в селищі / селі",
                                        "Poltava" = "Полтава",
                                        "Zaporizhzhia" = "Запоріжжя",
                                        "Radomyshl" = "Радомишль",
                                        "Khmelnytskyi" = "Хмельницький",
                                        "Smila" = "Сміла",
                                        "Odesa" = "Одеса",
                                        "Mukachevo" = "Мукачево",
                                        "Horishni Plavni" = "Горішні Плавні",
                                        "Ladyzhin" = "Ладижин",
                                        "Dnipro" = "Дніпро",
                                        "Ternopil" = "Тернопіль",
                                        "Yaremche" = "Яремче",
                                        "Kovel" = "Ковель",
                                        "Netishyn" = "Нетішин",
                                        "Nizhyn" = "Ніжин",
                                        "Kaniv" = "Канів",
                                        "Nikopol" = "Нікополь",
                                        "Oleksandriia" = "Олександрія",
                                        "Volochysk" = "Волочиськ",
                                        "Podilsk" = "Подільськ",
                                        "Kremenchuk" = "Кременчук",
                                        "Resided in SMT" = "Проживав(ла) в СМТ",
                                        "Berdychiv" = "Бердичів",
                                        "Sumy" = "Суми",
                                        "Pomichna" = "Помічна",
                                        "Rivne" = "Рівне",
                                        "Irshava" = "Іршава",
                                        "Svalyava" = "Свалява",
                                        "Chervonohrad" = "Червоноград",
                                        "Kolomyia" = "Коломия",
                                        "Svitlovodsk" = "Світловодськ",
                                        "Cherkasy" = "Черкаси",
                                        "Uzhhorod" = "Ужгород",
                                        "Peremyshliany" = "Перемишляни",
                                        "Khust" = "Хуст",
                                        "Znamianka" = "Знам'янка",
                                        "Lokhvytsia" = "Лохвиця",
                                        "Olevsk" = "Олевськ",
                                        "Kropyvnytskyi" = "Кропивницький",
                                        "Zhovti Vody" = "Жовті Води",
                                        "Kryvyi Rih" = "Кривий Ріг",
                                        "Bila Tserkva" = "Біла Церква",
                                        "Zolotonosha" = "Золотоноша",
                                        "Zhashkiv" = "Жашків",
                                        "Pryluky" = "Прилуки",
                                        "Korostyshiv" = "Коростишів",
                                        "Bakhmach" = "Бахмач",
                                        "Bar" = "Бар",
                                        "Dolyna" = "Долина",
                                        "Zbarazh" = "Збараж",
                                        "Horodok" = "Городок",
                                        "Monastyryshche" = "Монастирище",
                                        "Kozyatyn" = "Козятин",
                                        "Pervomaisk" = "Первомайськ",
                                        "Vatutine" = "Ватутіне",
                                        "Morshyn" = "Моршин",
                                        "Tyachiv" = "Тячів",
                                        "Bilhorod-Dnistrovskyi" = "Білгород-Дністровський",
                                        "Chernivtsi" = "Чернівці",
                                        "Yampil" = "Ямпіль",
                                        "Synelnykove" = "Синельникове",
                                        "Zhytomyr" = "Житомир",
                                        "Truskavets" = "Трускавець",
                                        "Halych" = "Галич",
                                        "Kalinivka" = "Калинівка",
                                        "Zhmerynka" = "Жмеринка"),
         region_moving_ua = as.character(as_factor(region_moving)),
         region_moving_en = fct_recode(region_moving_ua,
                                       "Kyiv City" = "Київ",
                                       "South" = "Південний",
                                       "Center" = "Центральний",
                                       "West" = "Західний",
                                       "North" = "Північний",
                                       "East" = "Східний"),
         age_int = as.character(as_factor(demo_age_int)),
         gender_ua = as.character(as_factor(demo_gender)),
         gender = ifelse(gender_ua == "Жіноча", 0, ifelse(gender_ua == "Чоловіча", 1, NA)),
         educ_ua = as.character(as_factor(education)),
         region_war = case_when(
           oblast_before_en %in% c("Donetsk Region", "Zhytomyr Region", "Zaporizhzhia Region", "Kyiv City", "Kyiv Region", "Mykolaiv Region", "Sumy Region", "Kharkiv Region", "Kherson Region", "Chernihiv Region") ~ 1,
           TRUE ~ 0)) %>%
    mutate(geo = case_when(
    str_detect(oblast_before_en, "Vinnytsia Region") ~ "UA-05",
    str_detect(oblast_before_en, "Volyn Region") ~ "UA-07",
    str_detect(oblast_before_en, "Dnipropetrovsk Region") ~ "UA-12",
    str_detect(oblast_before_en, "Donetsk Region") ~ "UA-14",
    str_detect(oblast_before_en, "Zhytomyr Region") ~ "UA-18",
    str_detect(oblast_before_en, "Zakarpattia Region") ~ "UA-21",
    str_detect(oblast_before_en, "Zaporizhzhia Region") ~ "UA-23",
    str_detect(oblast_before_en, "Ivano-Frankivsk Region") ~ "UA-26",
    str_detect(oblast_before_en, "Kyiv City") ~ "UA-30",
    str_detect(oblast_before_en, "Kyiv Region") ~ "UA-32",
    str_detect(oblast_before_en, "Kirovohrad Region") ~ "UA-35",
    str_detect(oblast_before_en, "Luhansk Region") ~ "UA-09",
    str_detect(oblast_before_en, "Lviv Region") ~ "UA-46",
    str_detect(oblast_before_en, "Mykolaiv Region") ~ "UA-48",
    str_detect(oblast_before_en, "Odesa Region") ~ "UA-51",
    str_detect(oblast_before_en, "Poltava Region") ~ "UA-53",
    str_detect(oblast_before_en, "Rivne Region") ~ "UA-56",
    str_detect(oblast_before_en, "Sumy Region") ~ "UA-59",
    str_detect(oblast_before_en, "Ternopil Region") ~ "UA-61",
    str_detect(oblast_before_en, "Kharkiv Region") ~ "UA-63",
    str_detect(oblast_before_en, "Kherson Region") ~ "UA-65",
    str_detect(oblast_before_en, "Khmelnytskyi Region") ~ "UA-68",
    str_detect(oblast_before_en, "Cherkasy Region") ~ "UA-71",
    str_detect(oblast_before_en, "Chernivtsi Region") ~ "UA-74",
    str_detect(oblast_before_en, "Chernihiv Region") ~ "UA-77",
    TRUE ~ NA_character_
  )) %>% 
  mutate(stipend_main = ifelse(q20 == 1, 1, 0),
         pension_main = ifelse(q20 == 2, 1, 0),
         govpay_main = ifelse(q20 == 3, 1, 0),
         job_main = ifelse(q20 == 4, 1, 0),
         business_main = ifelse(q20 == 5, 1, 0),
         relatives_main = ifelse(q20 == 6, 1, 0),
         other_main = ifelse(q20 == 7, 1, 0),
         no_main = ifelse(q20 == 8, 1, 0)) %>% 
  rename(
    "debts" = "q24",
    "evacuate" = "q27_1",
    "occupation" = "q27_2",
    "bombing" = "q27_3",
    "prop_dmg" = "q27_4",
    "phys_viol" = "q27_5",
    "emo_viol" = "q27_6",
    "robbery" = "q27_7",
    "fam_afu" = "q27_8",
    "fam_death" = "q27_9",
    "war_no_ans" = "q27_10",
    "phys_injury" = "q28_1",
    "depression" = "q28_2",
    "confid_loss" = "q28_3",
    "insom" = "q28_4",
    "no_effect" = "q28_5",
    "eff_no_ans" = "q28_6",
    "war_last" = "q39",
    "age" = "demo_age",
    "return" = "geosoc10") %>% 
  mutate(debts_small = ifelse(q25 == 1, 1, 0),
         debts_medium = ifelse(q25 == 2, 1, 0),
         debts_big = ifelse(q25 == 3, 1, 0)) %>% 
  mutate(inc_5 = ifelse(q21 == 1, 1, 0),
         inc_20 = ifelse(q21 == 2, 1, 0),
         inc_40 = ifelse(q21 == 3, 1, 0),
         inc_60 = ifelse(q21 == 4, 1, 0),
         inc_80 = ifelse(q21 == 5, 1, 0),
         inc_100 = ifelse(q21 == 6, 1, 0)) %>%
  mutate(finc_5 = ifelse(q21_1 == 1, 1, 0),
         finc_20 = ifelse(q21_1 == 2, 1, 0),
         finc_40 = ifelse(q21_1 == 3, 1, 0),
         finc_60 = ifelse(q21_1 == 4, 1, 0),
         finc_80 = ifelse(q21_1 == 5, 1, 0),
         finc_100 = ifelse(q21_1 == 6, 1, 0)) %>% 
  mutate(expect_much_better = ifelse(q22 == 5, 1, 0),
         expect_better = ifelse(q22 == 4, 1, 0),
         expect_same = ifelse(q22 == 3, 1, 0),
         expect_worse = ifelse(q22 == 2, 1, 0),
         expect_much_worse = ifelse(q22 == 1, 1, 0)) %>% 
  mutate(change_much_better = ifelse(q23 == 5, 1, 0),
         change_better = ifelse(q23 == 4, 1, 0),
         change_same = ifelse(q23 == 3, 1, 0),
         change_worse = ifelse(q23 == 2, 1, 0),
         change_much_worse = ifelse(q23 == 1, 1, 0)) %>% 
  mutate(calm_always = ifelse(q26_1 == 1, 1, 0),
         calm_more = ifelse(q26_1 == 2, 1, 0),
         calm_freq = ifelse(q26_1 == 3, 1, 0),
         calm_often = ifelse(q26_1 == 4, 1, 0),
         calm_less = ifelse(q26_1 == 5, 1, 0),
         calm_never = ifelse(q26_1 == 6, 1, 0)) %>% 
  mutate(energy_always = ifelse(q26_2 == 1, 1, 0),
         energy_more = ifelse(q26_2 == 2, 1, 0),
         energy_freq = ifelse(q26_2 == 3, 1, 0),
         energy_often = ifelse(q26_2 == 4, 1, 0),
         energy_less = ifelse(q26_2 == 5, 1, 0),
         energy_never = ifelse(q26_2 == 6, 1, 0)) %>% 
  mutate(sad_always = ifelse(q26_3 == 1, 1, 0),
         sad_more = ifelse(q26_3 == 2, 1, 0),
         sad_freq = ifelse(q26_3 == 3, 1, 0),
         sad_often = ifelse(q26_3 == 4, 1, 0),
         sad_less = ifelse(q26_3 == 5, 1, 0),
         sad_never = ifelse(q26_3 == 6, 1, 0)) %>% 
  mutate(not_married = ifelse(geosoc1 == 1, 1, 0),
         married_together = ifelse(geosoc1 == 2, 1, 0),
         married_separate = ifelse(geosoc1 == 3, 1, 0),
         civil_marriage = ifelse(geosoc1 == 4, 1, 0),
         divorced = ifelse(geosoc1 == 5, 1, 0),
         widow = ifelse(geosoc1 == 6, 1, 0)) %>% 
  mutate(kids_under18 = ifelse(geosoc2 == 1, 1, 0),
         kids_over18 = ifelse(geosoc2 == 2, 1, 0),
         kids_under_over18 = ifelse(geosoc2 == 3, 1, 0),
         kids_pregnant = ifelse(geosoc2 == 4, 1, 0),
         no_kids = ifelse(geosoc2 == 5, 1, 0)) %>% 
  mutate(kids_together = ifelse(geosoc3 == 1, 1, 0),
         kids_some_together = ifelse(geosoc3 == 2, 1, 0),
         kids_not_together = ifelse(geosoc3 == 3, 1, 0)) %>% 
  mutate(stayed_city = ifelse(geosoc6 == 1, 1, 0),
         left_came_back = ifelse(geosoc6 == 2, 1, 0),
         left_no_come_back = ifelse(geosoc6 == 3, 1, 0)) %>% 
  mutate(left_within_oblast = ifelse(geosoc7 == 1, 1, 0),
         left_other_oblast = ifelse(geosoc7 == 2, 1, 0),
         left_abroad = ifelse(geosoc7 == 3, 1, 0)) %>% 
  mutate(country_abroad = ifelse(geosoc9 %in% c(1,2,3,4), 1, 0)) %>% 
  rename("stipend_scnd" = "q20_1_1",
         "pension_scnd" = "q20_1_2",
         "govpay_scnd" = "q20_1_3",
         "part_time_job" = "q20_1_4",
         "rental_inc" = "q20_1_5",
         "invest_icn" = "q20_1_6",
         "other" = "q20_1_7") %>% 
  select(-q2, 
         -q3, 
         -q4, 
         -q5, 
         -q6, 
         -q7,
         -q8, 
         -q9, 
         -q10, 
         -q11, 
         -q12,
         -q13,
         -q14,
         -q15,
         -q16,
         -q16,
         -q17,
         -q18,
         -q19,
         -q20,
         -open_q20_7,
         -q20_1_8,
         -open_q20_1_7,
         -q21,
         -q21_1,
         -q22,
         -q23,
         -q25,
         -q26_1,
         -q26_2,
         -q26_3,
         -open_q39_5,
         -geosoc1,
         -geosoc2,
         -geosoc3,
         -open_geosoc3_4,
         -geosoc6,
         -geosoc7,
         -geosoc9,
         -open_geosoc9_4,
         -educ_ua,
         -demo_oblast, 
         -demo_age_int, 
         -demo_gender, 
         -demo_region, 
         -demo_city, 
         -demo_сity_size,
         -oblast_moving,
         -oblast_moving_ua,
         -region_moving,
         -region_moving_ua,
         -education, 
         -region_before_ua,
         -gender_ua, 
         -oblast_before_ua, 
         -city_before_ua,
         -city_size_before_ua,
         -сity_size_moving,
         -city_moving,
         -weight)
```

```{r discounting}
# Code adapted from (Ruggeri, 2022)
dat_items <- 
  data_copy[, c(1:18)] %>%
  arrange(ResponseId) %>% 
  mutate(amount_later16 = case_when(
    q2 == 1 & q5 == 0 ~ 550,
    q3 == 1 ~ 600,
    q4 == 0 | q4 == 1 ~ 750,
    q5 == 1 & q6 == 0 ~ 510,
    q6 == 1 ~ 505)) %>% 
  
  mutate(amount_later17 = case_when(
    q2 == 1 & q5 == 0 ~ 600,
    q3 == 1 ~ 700,
    q4 == 1 | q4 == 0 ~ 1000,
    q5 == 1 & q6 == 0 ~ 520,
    q6 == 0 ~ 510)) %>% 
  
  
  mutate(amount_later18 = case_when(
    amount_later16 == 505  ~ 505,
    amount_later16 == 510  ~ 510,
    amount_later16 == 550  ~ 550,
    amount_later16 == 600  ~ 600,
    amount_later16 == 750  ~ 750
  )) %>% 
  
  mutate(amount_later19 = case_when(
    amount_later16 == 505  ~ 505,
    amount_later16 == 510  ~ 510,
    amount_later16 == 550  ~ 550,
    amount_later16 == 600  ~ 600,
    amount_later16 == 750  ~ 750
  )) %>% 
  
  pivot_longer(q2:q18, 
               names_to = c("question")) %>% 
  
  mutate (amount_later = case_when(
    question == "q2" | question == "q7" ~ 550,
    question == "q3" | question == "q8" ~ 600,
    question == "q4" | question == "q9" ~ 750,
    question == "q5" | question == "q10"~ 510,
    question == "q6" | question == "q11"~ 505,
    question == "q12" ~ 5500,
    question == "q13" ~ 6000,
    question == "q14" ~ 7500,
    question == "q15" ~ 5100,
    question == "q16" ~ 5050,
    question == "q17" ~ amount_later16)) %>% 

  mutate (question = paste("Q",rep(1:ncol(select(data_copy, q2:"q18")), nrow(data_copy)), sep ="")) %>%
  mutate (question_num = as.numeric(gsub("Q", "", question))) %>% 
  
  mutate ( block = case_when(
    question_num < 6 ~ "block1",
    question_num >= 6 & question_num < 11 ~ "block2",
    question_num >= 11 & question_num < 16 ~ "block3",
    question_num == 16 ~ "anom1",
    question_num == 17 ~ "anom2",  # Common difference
    # question_num == 18 ~ "anom3",
    # question_num == 19 ~ "anom3",
  )) %>% 

    mutate (choice = case_when(
    is.na(value) ~ NA_real_,
    value == 0 ~ 0,
    value == 1 ~ 1,
    TRUE  ~ 1
  )) %>% 
  
  rename(choice_text = "value") %>% 
  relocate(choice_text, .after = choice) %>%
  
  select(-amount_later16, -amount_later17, -amount_later18, -amount_later19) %>%
  drop_na(choice) %>% 
  mutate_if(is.character,as.factor)



presbias <- as.numeric(get_latest_answer(dat_items, 6)$choice != get_second_choices(dat_items,"Q16"))
absolmag <- as.numeric(get_latest_answer(dat_items, 6)$choice != as.numeric(get_latest_answer(dat_items, 13)$choice))
gainloss <- as.numeric(get_latest_answer(dat_items, 6)$choice == as.numeric(get_latest_answer(dat_items, 11)$choice))
delayspeed <- as.numeric(get_latest_answer(dat_items, 6)$choice != get_second_choices(dat_items,"Q17"))

anomalies_data <- list()

## We apply the function fixer_anom to estimate whether the anomalies are observed and whether those are consistent with the theory or not.
## Given a first and a second set of responses, plus an ID identifier, it will classify the pattern of responses in anomaly/not anomaly and in the first case, whether it is consistent or not.
## In the second case (not anomaly), it will also inform whether the first decision was a sooner or a later choice.

anomalies_data[[1]] <- fixer_anoms (data.frame(fc = get_latest_answer(dat_items, 6)$choice,
                                              sc =  get_second_choices(dat_items,"Q16"),
                                              ResponseId = unique(dat_items$ResponseId)), type = "presbias")

anomalies_data[[2]] <- fixer_anoms (data.frame(fc = get_latest_answer(dat_items, 6)$choice,
                                              sc =  as.numeric(get_latest_answer(dat_items, 16)$choice),
                                              ResponseId = unique(dat_items$ResponseId)), type = "absolmag")

anomalies_data[[3]] <- fixer_anoms (data.frame(fc = get_latest_answer(dat_items, 6)$choice,
                                              sc =  as.numeric(get_latest_answer(dat_items, 11)$choice),
                                              ResponseId = unique(dat_items$ResponseId)), type = "gainloss")

anomalies_data[[4]] <- fixer_anoms (data.frame(fc =  get_latest_answer(dat_items, 6)$choice,
                                              sc =  get_second_choices(dat_items,"Q17"),
                                              ResponseId = unique(dat_items$ResponseId)), type = "delay")


anomalies_congruent <- anomalies_data %>% 
  
  ### We are only interested in individual responses
  reduce(left_join, by = "ResponseId") %>%
  rename ( "presbias" = "response.x",
           "absolmag" = "response.y",
           "gainloss" = "response.x.x",
           "delayspeed" = "response.y.y") %>% 
  
  select(ResponseId, presbias, absolmag, gainloss, delayspeed) %>% 
  mutate_at(vars(presbias, absolmag, gainloss, delayspeed),
            funs(case_when(
              . == "Congruent" ~ 1,
              TRUE ~ 0)))

##  We calculate the temporal discount scores from responses to each block plus item Q17 (anomaly)
### Careful with reversed scores when estimating the scores

scores <- get_scores(get_latest_answer(dat_items, 6))$score +
  5 - get_scores(get_latest_answer(dat_items, 11))$score +
  get_scores(get_latest_answer(dat_items, 16))$score +
  1 - get_second_choices(dat_items, "Q16") +
  1 - get_second_choices(dat_items, "Q17")

### We merge these scores and the anomalies rates with the original dataset 
q <- dat_items %>% 
  count(ResponseId) %>% 
  arrange()        

dat_items <- dat_items %>% 
  arrange(ResponseId) %>%
  mutate (score = rep(scores, q$n),
          presbias = rep(anomalies_congruent$presbias, q$n),
          absolmag = rep(anomalies_congruent$absolmag, q$n),
          gainloss = rep(anomalies_congruent$gainloss, q$n),
          delayspeed = rep(anomalies_congruent$delayspeed, q$n))

dat_unique <- dat_items %>% 
  distinct(ResponseId, .keep_all = TRUE) %>% 
  select(-question, -amount_later, -question_num, -block, -choice, -choice_text)

dat <- data_clean %>% 
  left_join(dat_unique, by = "ResponseId")


dat <- dat %>%  
  mutate(across(everything(), convert_labelled_to_numeric)) %>% 
  mutate(score.c = c(scale(score))) 

dt <- data_copy[, c(1, 31:34, 37:39)] %>% 
  rename("monthly_inc" = "q21",
         "monthly_house_inc" = "q21_1",
         "fwb_expect" = "q22",
         "fwb_war" = "q23",
         "feel_calm" = "q26_1",
         "feel_energy" = "q26_2",
         "feel_sad" = "q26_3") %>%
  mutate(
    fwb_expect = case_when(
      fwb_expect == 1 ~ -2,
      fwb_expect == 2 ~ -1,
      fwb_expect == 3 ~ 0,
      fwb_expect == 4 ~ 1,
      fwb_expect == 5 ~ 2),
    fwb_war = case_when(
      fwb_war == 1 ~ -2,
      fwb_war == 2 ~ -1,
      fwb_war == 3 ~ 0,
      fwb_war == 4 ~ 1,
      fwb_war == 5 ~ 2),
    feel_calm = case_when(
      feel_calm == 1 ~ 0,
      feel_calm == 2 ~ 1,
      feel_calm == 3 ~ 2,
      feel_calm == 4 ~ 3,
      feel_calm == 5 ~ 4,
      feel_calm == 6 ~ 5),
    feel_energy = case_when(  
      feel_energy == 1 ~ 0,
      feel_energy == 2 ~ 1,
      feel_energy == 3 ~ 2,
      feel_energy == 4 ~ 3,
      feel_energy == 5 ~ 4,
      feel_energy == 6 ~ 5),
    feel_sad = case_when(
      feel_sad == 1 ~ 0,
      feel_sad == 2 ~ 1,
      feel_sad == 3 ~ 2,
      feel_sad == 4 ~ 3,
      feel_sad == 5 ~ 4,
      feel_sad == 6 ~ 5)) %>% 
  left_join(dat, by = "ResponseId")

dt$intensity <- rowSums(dt[,c(11:18)])/8
dt$monthly_inc <- dt$monthly_inc %>%
  sapply(function(income) {
    case_when(
      income == 1 ~ (0 + 5000)/2,
      income == 2 ~ (5000 + 19999)/2,
      income == 3 ~ (20000 + 39999)/2,
      income == 4 ~ (40000 + 59999)/2,
      income == 5 ~ (60000 + 79999)/2,
      income == 6 ~ 80000,  # Assuming mean for 80k+ is just 80k, adjust as necessary
      TRUE ~ NA_real_  # Default case if none of the above match
    )
  })
dt$fin_safety <- rowSums(dt[,c(9:15,47:53)])

rm(q,scores, presbias, absolmag, gainloss, delayspeed)
```

```{r saving data}
# Calculating temporal discounting score and anomalies
writexl::write_xlsx(dt, "survey.xlsx", col_names = TRUE)
```

# Analysis

```{r LR test for ordinal variables}
#treating ordinal data as continuous
mod_ord_test1 <- lm(score.c ~ monthly_inc + fwb_expect + fwb_war, data = filter(dt, !is.na(monthly_inc)))
mod_ord_test2 <- lm(score.c ~ 
                      inc_5 + inc_20 + inc_40 + inc_60 + inc_80 + inc_100 + 
                      expect_much_better + expect_better + expect_worse + expect_much_worse + 
                      change_much_better + change_better + change_worse + change_much_worse, data = filter(dt, !is.na(monthly_inc)))


mod_ord_test3 <- lm(score.c ~ monthly_inc + monthly_house_inc + debts + fwb_expect + fwb_war + 
                      inc_5 + inc_20 + inc_40 + inc_60 + inc_80 + inc_100 +
                      expect_much_better + expect_better + expect_worse + expect_much_worse + 
                      change_much_better + change_better + change_worse + change_much_worse, data = filter(dt, !is.na(monthly_inc)))

stargazer(mod_ord_test1,
          mod_ord_test2,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

(A <- logLik(mod_ord_test1))
(B <- logLik(mod_ord_test2))
(teststat <- -2 * (as.numeric(A)-as.numeric(B)))
# df=16-5=11
(p.val <- pchisq(teststat, df = 10, lower.tail = FALSE))

mod_ord_test4 <- lm(score.c ~ feel_calm + feel_energy + feel_sad, data = dt)
mod_ord_test5 <- lm(score.c ~ 
                      calm_always + calm_more + calm_freq + calm_less + calm_never +
                      energy_always + energy_more + energy_freq + energy_less + energy_never +
                      sad_always + sad_more + sad_freq + sad_less + sad_never, data = dt)
mod_ord_test6 <- lm(score.c ~ 
                      feel_calm + feel_energy + feel_sad + 
                      calm_always + calm_more + calm_freq + calm_less + calm_never +
                      energy_always + energy_more + energy_freq + energy_often + energy_less + energy_never +
                      sad_always + sad_more + sad_freq + sad_less + sad_never, data = dt)


stargazer(mod_ord_test4,
          mod_ord_test5,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

(A2 <- logLik(mod_ord_test4))
(B2 <- logLik(mod_ord_test5))
#df=17-5
(teststat2 <- -2 * (as.numeric(A2)-as.numeric(B2)))
(p.val2 <- pchisq(teststat2, df = 12, lower.tail = FALSE))

```

# Mediation Analysis

```{r}


```

```{r TD ~ FULL}
# Add the oblast_before_en column to the data table
pre_join_data <- merge(inflation_data, mapping, by = "oblast", all.x = TRUE)

# Perform the right join
joined_data <- right_join(air_alarms, dt, by = "oblast_before_en")

# Right join with joined_data
result <- merge(joined_data, pre_join_data, by = "oblast_before_en", all.y = TRUE)

full_score <- lm(score.c ~ ., data = dt[,-c(1,3,9:15,17,26,32:43,46:123,125)])

full_pres <- glm(presbias ~ ., data = dt[,-c(1,28:36,39,48:90,105:111,112,114:117)], family = binomial("logit"))

full_absol <- glm(absolmag ~ ., data = dt[,-c(1,28:36,39,48:90,105:111,112,113,115:117)], family = binomial("logit"))

full_gain <- glm(gainloss ~ ., data = dt[,-c(1,28:36,39,48:90,105:111,112:114,116,117)], family = binomial("logit"))

full_delay <- glm(delayspeed ~ ., data = dt[,-c(1,28:36,39,48:90,105:111,112:115,117)], family = binomial("logit"))

stargazer(full_score,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")


results_war1 <- tidy(full_score, conf.int = TRUE) %>%
  arrange(desc(estimate)) %>%
  filter(p.value < 0.1)   # Filter only significant results

# Add asterisks based on the significance level
results_war1$signif <- ifelse(results_war1$p.value < 0.01, '***',
                   ifelse(results_war1$p.value < 0.05, '**',
                   ifelse(results_war1$p.value < 0.1, '*', '')))

# Plot coefficients with ggplot2
p <- ggplot(results_war1, aes(x = estimate, y = reorder(term, estimate))) +  
  geom_point(aes(x = estimate), color = "black") +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, size = 0.7) +  # Increased thickness
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  
  # Add p-values as text with significance asterisks
  geom_text(aes(x = max(conf.high) + 0.05, 
            label = paste0("p = ", sprintf("%.3f", p.value), signif)),
            hjust = 0, vjust = 0) +
  labs(
    title = "",
    x = "Estimate",
    y = "Terms"
  ) +
  theme_minimal() +
  coord_cartesian(xlim = c(-1, 1)) +  # Set x-axis limits from -1 to 1
  
  # Adjust theme
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    text = element_text(family = "Garamond", size = 24)
  )


p
```

```{r TD ~ War}
#Which aspect of war is highly associated with TD?
mod_score <- lm(score.c ~ occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + region_war + age + gender, data = dt)


mod_pres <- glm(presbias ~ occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + region_war +  age + gender, data = dt, family = binomial("logit"))

mod_absol <- glm(absolmag ~ occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + region_war + age + gender, data = dt, family = binomial("logit"))


mod_gain <- glm(gainloss ~ occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + region_war + age + gender, data = dt, family = binomial("logit"))

mod_delay <- glm(delayspeed ~ occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + region_war + age + gender, data = dt, family = binomial("logit"))


# Select relevant columns
selected_cols <- c("score.c", "occupation", "bombing", "prop_dmg", "phys_viol", "emo_viol", "robbery", 
                   "fam_afu", "fam_death", "phys_injury", "depression", "confid_loss", "insom", "region_war", "age", "gender")
dt_selected <- dt[, selected_cols]

# Identify numeric columns, excluding 'score.c'
numeric_cols <- sapply(dt_selected, is.numeric) & names(dt_selected) != "score.c"

# Standardize only the numeric columns
dt_numeric_standardized <- scale(dt_selected[, numeric_cols])

# Combine standardized predictors with non-standardized ones
dt_standardized <- as.data.frame(cbind(score.c = dt_selected$score.c, dt_numeric_standardized, dt_selected[, !numeric_cols]))

# Fit the regression model with standardized dataset
mod_score_standardized <- lm(score.c ~ ., data = dt_standardized)



plot(fitted(mod_score), residuals(mod_score), main="Residuals vs Fitted", xlab="Fitted values", ylab="Residuals")
abline(h = 0, lty = 2)

# Get tidy results with confidence intervals
results_war <- tidy(mod_score, conf.int = TRUE) %>%
  arrange(desc(estimate))

# Add asterisks based on the significance level
results_war$signif <- ifelse(results_war$p.value < 0.01, '***',
                   ifelse(results_war$p.value < 0.05, '**',
                   ifelse(results_war$p.value < 0.1, '*', '')))

# Plot coefficients with ggplot2
ggplot(results_war, aes(x = estimate, y = reorder(term, estimate))) +  
  geom_point(aes(x = estimate), color = "black") +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, size = 0.7) +  # Increased thickness
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  
  # Add p-values as text with significance asterisks
  geom_text(aes(x = max(conf.high) + 0.05, 
            label = paste0("p = ", sprintf("%.3f", p.value), signif)),
            hjust = 0, vjust = 0) +
  labs(
    title = "",
    x = "Estimate",
    y = "Terms"
  ) +
  theme_minimal() +
  coord_cartesian(xlim = c(-1, 1)) +  # Set x-axis limits from -1 to 1
  
  # Adjust theme
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    text = element_text(family = "Garamond", size = 14)
  )
```

```{r robust WAR}
robust_score <- lm(score.c ~ year + Alarms + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, data = result)

stargazer(robust_score, mod_score,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          column.sep.width = "-25pt")
```

```{r TD ~ Intensity*Debts}
mod_int_debt <- lm(score.c ~ intensity, data = dt)

stargazer(mod_int_debt,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ War|Kids}
test_no_kids <- lm(score.c ~ intensity + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, subset(dt, no_kids == 1))

test_kids <- lm(score.c ~ intensity + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + no_effect + region_war + age + gender, subset(dt, no_kids == 0))

stargazer(test_no_kids, 
          test_kids,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ War|Interaction}
i_reg_war <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)*region_war + age + gender, data = result)

i_age <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)*age + gender, data = result)

i_debts <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)*debts + gender, data = result)

i_kids <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)*no_kids + gender, data = result)

i_fin_saf <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)*fin_safety + gender, data = result)

i_gender <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)* gender + age, data = result)

i_fwb_war <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death)*fwb_war + gender + age, data = result)

i_fwb_expect <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death)*fwb_expect + gender + age, data = result)

i_feel_sad <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom)*feel_sad + gender + age, data = result)

i_confid <- lm(score.c ~ (occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + depression + confid_loss + insom)*Alarms + gender + age, data = result)

stargazer(i_confid,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")




colors <- c("navy", "salmon")  # Light blue for Female and Light coral for Male

# Create the initial plot
p4 <- plot_model(i_gender, type = "pred", terms = c("bombing", "gender"))

y_lims <- ggplot_build(p4)$layout$panel_params[[1]]$y.range

bombing_plot <- p4 +
  scale_color_manual(values = c("blue", "red"), 
                     name = "Bombinge", 
                     breaks = c(0, 1),
                     labels = c("Female", "Male")) +
  labs(title = NULL, 
       y = "Score", 
       x = "Bombing") +
  theme_minimal() +
  theme(text = element_text(family = "Garamond", size = 28),
        axis.text.y = element_text(angle = 90, hjust = 0.5),
        legend.position = c(0.35, 0.95),
        legend.justification = c(1, 1),
        legend.background = element_rect(color = "black", fill = "white"),
        legend.key = element_rect(color = "white"),
        legend.title = element_blank(),
        panel.grid.major.x = element_line(color = "grey90")) +
  scale_y_continuous(breaks = c(-0.25, 0.25),
                     labels = c("More patient", "Less patient")) +
  theme(axis.line.y = element_blank(),
        axis.ticks.y = element_blank()) +
  geom_segment(aes(x = 0, xend = 0, y = min(y_lims), yend = max(y_lims)), color = "black") +
  annotate("segment", x = 0, xend = 0, y = min(y_lims), yend = min(y_lims) - 0.1, 
           arrow = arrow(type = "closed", length = unit(0.2, "inches"))) +
  annotate("segment", x = 0, xend = 0, y = max(y_lims), yend = max(y_lims) + 0.1, 
           arrow = arrow(type = "closed", length = unit(0.2, "inches")))


prop_dmg_plot <- plot_model(i_gender, type = "pred", terms = c("prop_dmg", "gender")) + 
  scale_color_manual(values = colors, 
                     name = "Gender", 
                     breaks = c(0, 1),
                     labels = c("Female", "Male")) +
  labs(title = NULL, 
       y = "Score", 
       x = "Property damage") +
  scale_x_continuous(breaks = c(0, 1)) +
  theme_minimal() +
  theme(text = element_text(family = "Garamond", size = 28),
        axis.text.y = element_text(angle = 90, hjust = 0.5),
        legend.position = c(0.3, 0.95),
        legend.justification = c(1, 1),
        legend.background = element_rect(color = "black", fill = "white"),
        legend.key = element_rect(color = colors),
        legend.title = element_blank(),
        panel.grid.major.x = element_line(color = "grey90")) +
  scale_y_continuous(breaks = c(-0.4, 0.4),
                     labels = c("More patient", "Less patient")) +
  theme(axis.line.y = element_blank(),
        axis.ticks.y = element_blank()) +
  geom_segment(aes(x = 0, xend = 0, y = min(y_lims), yend = max(y_lims)), color = "black") +
  annotate("segment", x = 0, xend = 0, y = min(y_lims), yend = min(y_lims) - 0.1, 
           arrow = arrow(type = "closed", length = unit(0.2, "inches"))) +
  annotate("segment", x = 0, xend = 0, y = max(y_lims), yend = max(y_lims) + 0.1, 
           arrow = arrow(type = "closed", length = unit(0.2, "inches")))

fam_death_plot <- plot_model(i_gender, type = "pred", terms = c("fam_death", "gender")) + 
  scale_color_manual(values = colors, 
                     name = "Gender", 
                     breaks = c(0, 1),
                     labels = c("Female", "Male")) +
  labs(title = NULL, 
       y = "", 
       x = "Family death") +
  scale_x_continuous(breaks = c(0, 1)) +
  theme_minimal() +
  theme(text = element_text(family = "Garamond", size = 28),
        axis.text.y = element_blank(),
        legend.position = "none",
        panel.grid.major.x = element_line(color = "grey90")) +
  theme(axis.line.y = element_blank(),
        axis.ticks.y = element_blank())

# Change the SE color to a darker version of our colors
se_colors <- scales::alpha(colors, 0.9)

# Modify prop_dmg_plot
prop_dmg_plot <- prop_dmg_plot +
  scale_fill_manual(values = se_colors) +
  guides(fill = FALSE) # Hide the fill legend if it gets generated

# Modify fam_death_plot
fam_death_plot <- fam_death_plot +
  scale_fill_manual(values = se_colors) +
  guides(fill = FALSE) # Hide the fill legend if it gets generated

(prop_dmg_plot + fam_death_plot)
```

```{r TD ~ FWB}
mod_fwb_score <- lm(score.c ~ monthly_inc + fwb_expect + fwb_war + debts + region_war + fin_safety, dt)

mod_fwb_pres <- glm(presbias ~ monthly_inc + fwb_expect + fwb_war + debts + region_war + fin_safety, dt, family = binomial("logit"))

mod_fwb_absl <- glm(absolmag ~ monthly_inc + fwb_expect + fwb_war + debts + region_war + fin_safety, dt, family = binomial("logit"))

mod_fwb_gl <- glm(gainloss ~ monthly_inc + fwb_expect + fwb_war + debts + region_war + fin_safety, dt, family = binomial("logit"))

mod_fwb_dl <- glm(delayspeed ~ monthly_inc + fwb_expect + fwb_war + debts + region_war + fin_safety, dt, family = binomial("logit"))

stargazer(mod_fwb_score, 
          mod_fwb_pres, 
          mod_fwb_absl, 
          mod_fwb_gl,  
          mod_fwb_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Get tidy results with confidence intervals
results_fwb <- tidy(mod_fwb_score, conf.int = TRUE) %>%
  arrange(desc(estimate))

# Add asterisks based on the significance level
results_fwb$signif <- ifelse(results_fwb$p.value < 0.01, '***',
                   ifelse(results_fwb$p.value < 0.05, '**',
                   ifelse(results_fwb$p.value < 0.1, '*', '')))

# Plot coefficients with ggplot2
ggplot(results_fwb, aes(x = estimate, y = reorder(term, estimate))) +  
  geom_point(aes(x = estimate), color = "black") +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, size = 1) +  # Increased thickness
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  
  # Add p-values as text with significance asterisks
  geom_text(aes(x = max(conf.high) + 0.05, 
            label = paste0("p = ", sprintf("%.3f", p.value), signif)),
            hjust = 0, vjust = 0) +
  
  labs(
    title = "",
    x = "Estimate",
    y = ""
  ) +
  theme_minimal() +
  coord_cartesian(xlim = c(-1, 1)) +  # Set x-axis limits from -1 to 1
  
  # Adjust theme
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    text = element_text(family = "Garamond", size = 24)
  )
```

```{r TD ~ FWB*MH}
mod_fwbmh <- lm(score.c ~ no_kids + no_kids*fwb_war, dt)

stargazer(mod_fwbmh, 
           header=FALSE,
           type='text', 
           digits=3,
           font.size = "normalsize",
           align = TRUE,
           omit.stat=c("ser"),
           column.sep.width = "-25pt")
```

```{r TD ~ FWB|Kids}
fwb_no_kids <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, subset(dt, no_kids == 1))

fwb_kids <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war + debts, subset(dt, no_kids == 0))

stargazer(fwb_no_kids, 
          fwb_kids,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ FWB|Debts}
fwb_score_debts <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war, subset(dt, debts == 1))

fwb_score_no_debts <- lm(score.c ~ monthly_inc + monthly_house_inc + fwb_expect + fwb_war, subset(dt, debts == 0))

stargazer(fwb_score_debts, 
          fwb_score_no_debts, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ MH}
mod_mh_td <- lm(score.c ~ feel_calm + feel_energy + feel_sad + married_together + married_separate + not_married + no_kids, dt)

mod_mh_pres <- glm(presbias ~ feel_calm + feel_energy + feel_sad + married_together + married_separate + not_married + no_kids, dt, family = binomial("logit"))

mod_mh_absol <- glm(absolmag ~ feel_calm + feel_energy + feel_sad + married_together + married_separate + not_married + no_kids, dt, family = binomial("logit"))

mod_mh_gl <- glm(gainloss ~ feel_calm + feel_energy + feel_sad + married_together + married_separate + not_married + no_kids, dt, family = binomial("logit"))

mod_mh_dl <- glm(delayspeed ~ feel_calm + feel_energy + feel_sad + married_together + married_separate + not_married + no_kids, dt, family = binomial("logit"))

stargazer(mod_mh_td, 
          mod_mh_pres, 
          mod_mh_absol, 
          mod_mh_gl,  
          mod_mh_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")
          
# Get tidy results with confidence intervals
results_mh <- tidy(mod_mh_td, conf.int = TRUE) %>%
  arrange(desc(estimate))

# Add asterisks based on the significance level
results_mh$signif <- ifelse(results_mh$p.value < 0.01, '***',
                   ifelse(results_mh$p.value < 0.05, '**',
                   ifelse(results_mh$p.value < 0.1, '*', '')))

# Plot coefficients with ggplot2
ggplot(results_mh, aes(x = estimate, y = reorder(term, estimate))) +  
  geom_point(aes(x = estimate), color = "black") +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, size = 0.7) +  # Increased thickness
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  
  # Add p-values as text with significance asterisks
  geom_text(aes(x = max(conf.high) + 0.05, 
            label = paste0("p = ", sprintf("%.3f", p.value), signif)),
            hjust = 0, vjust = 0) +
  
  labs(
    title = "",
    x = "Estimate",
    y = "Terms"
  ) +
  theme_minimal() +
  coord_cartesian(xlim = c(-1, 1)) +  # Set x-axis limits from -1 to 1
  
  # Adjust theme
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    text = element_text(family = "Garamond", size = 14)
  )
          
```

```{r TD ~ MH|Kids}
mh_td_kids <- lm(score.c ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, subset(dt, no_kids == 0))

mh_td_no_kids <- lm(score.c ~ feel_calm + feel_energy + feel_sad + depression + confid_loss, subset(dt, no_kids == 1))

stargazer(mh_td_kids, 
          mh_td_no_kids,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Kids}
mod_kid_td <- lm(score.c ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt)

mod_kid_pres <- glm(presbias ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

mod_kid_absol <- glm(absolmag ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

mod_kid_gl <- glm(gainloss ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

mod_kid_dl <- glm(delayspeed ~ kids_under18 + kids_over18 + kids_under_over18 + kids_pregnant + no_kids + kids_together + kids_some_together + kids_not_together + kids_under18*kids_not_together, dt, family = binomial("logit"))

stargazer(mod_kid_td, 
          mod_kid_pres, 
          mod_kid_absol, 
          mod_kid_gl,  
          mod_kid_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ MISC1}
mod_m1_td <- lm(score.c ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt)

mod_m1_pres <- glm(presbias ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

mod_m1_absol <- glm(absolmag ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

mod_m1_gl <- glm(gainloss ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

mod_m1_dl <- glm(delayspeed ~ stayed_city + left_came_back + left_no_come_back + left_within_oblast + left_other_oblast + left_abroad, dt, family = binomial("logit"))

stargazer(mod_m1_td, 
          mod_m1_pres, 
          mod_m1_absol, 
          mod_m1_gl,  
          mod_m1_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Alone}
alone_td <- lm(score.c ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt)

alone_pres <- glm(presbias ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))

alone_absol <- glm(absolmag ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))

####!!!!
alone_gl <- glm(gainloss ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))
####!!!!

alone_dl <- glm(delayspeed ~ not_married + married_together + married_separate + civil_marriage + divorced + widow, dt, family = binomial("logit"))

stargazer(alone_td, 
          alone_pres, 
          alone_absol, 
          alone_gl,  
          alone_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r TD ~ Main source}
income_td <- lm(score.c ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt)

income_pres <- glm(presbias ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

income_absol <- glm(absolmag ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

income_gl <- glm(gainloss ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

income_dl <- glm(delayspeed ~ stipend_main + pension_main + govpay_main + job_main + business_main + relatives_main + other_main, dt, family = binomial("logit"))

stargazer(income_td, 
          income_pres, 
          income_absol, 
          income_gl,  
          income_dl, 
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("f", "ser"),
          column.sep.width = "-25pt")
```

```{r}
# Occupation 
occ_full <- lm(score.c ~ occupation + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

occ_1 <- lm(fwb_war ~ occupation + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

occ_2 <- lm(fwb_expect ~ occupation + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

occ_4 <- lm(feel_sad ~ occupation + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

occ_5 <- lm(feel_energy ~ occupation + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

occ_6 <- lm(feel_calm ~ occupation + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(occ_full, 
          occ_1, 
          occ_2,
          occ_4,
          occ_5,
          occ_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

#Direct effect
direct_effect <- coef(occ_full)["occupation"]
direct_se <- summary(occ_full)$coefficients["occupation", "Std. Error"]
direct_pvalue <- summary(occ_full)$coefficients["occupation", "Pr(>|t|)"]
direct_ci_low <- direct_effect - 1.96 * direct_se
direct_ci_high <- direct_effect + 1.96 * direct_se

# Calculate Indirect Effects and their standard errors
indirect_effects <- c(
  coef(occ_1)["occupation"] * coef(occ_full)["fwb_war"],
  coef(occ_2)["occupation"] * coef(occ_full)["fwb_expect"],
  coef(occ_4)["occupation"] * coef(occ_full)["feel_sad"],
  coef(occ_5)["occupation"] * coef(occ_full)["feel_energy"],
  coef(occ_6)["occupation"] * coef(occ_full)["feel_calm"]
)

indirect_se <- sqrt(
  (coef(occ_1)["occupation"]^2 * summary(occ_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(occ_full)["fwb_war"]^2 * summary(occ_1)$coefficients["occupation", "Std. Error"]^2) +
  (coef(occ_2)["occupation"]^2 * summary(occ_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(occ_full)["fwb_expect"]^2 * summary(occ_2)$coefficients["occupation", "Std. Error"]^2) +
  (coef(occ_4)["occupation"]^2 * summary(occ_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(occ_full)["feel_sad"]^2 * summary(occ_4)$coefficients["occupation", "Std. Error"]^2) +
  (coef(occ_5)["occupation"]^2 * summary(occ_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(occ_full)["feel_energy"]^2 * summary(occ_5)$coefficients["occupation", "Std. Error"]^2) +
  (coef(occ_6)["occupation"]^2 * summary(occ_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(occ_full)["feel_calm"]^2 * summary(occ_6)$coefficients["occupation", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect <- sum(indirect_effects)
indirect_pvalue <- 2 * (1 - pnorm(abs(indirect_effect / indirect_se)))
indirect_ci_low <- indirect_effect - 1.96 * indirect_se
indirect_ci_high <- indirect_effect + 1.96 * indirect_se

# Compile results
results <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect, indirect_effect),
  Std.Error = c(direct_se, indirect_se),
  P.Value = c(direct_pvalue, indirect_pvalue),
  CI.Lower = c(direct_ci_low, indirect_ci_low),
  CI.Upper = c(direct_ci_high, indirect_ci_high)
)
results
```

```{r}
# Prop damage 
prop_full <- lm(score.c ~ prop_dmg + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

prop_1 <- lm(fwb_war ~ prop_dmg + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

prop_2 <- lm(fwb_expect ~ prop_dmg + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

prop_4 <- lm(feel_sad ~ prop_dmg + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

prop_5 <- lm(feel_energy ~ prop_dmg + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

prop_6 <- lm(feel_calm ~ prop_dmg + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(prop_full, 
          prop_1, 
          prop_2,
          prop_4,
          prop_5,
          prop_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect
direct_effect_prop <- coef(prop_full)["prop_dmg"]
direct_se_prop <- summary(prop_full)$coefficients["prop_dmg", "Std. Error"]
direct_pvalue_prop <- summary(prop_full)$coefficients["prop_dmg", "Pr(>|t|)"]
direct_ci_low_prop <- direct_effect_prop - 1.96 * direct_se_prop
direct_ci_high_prop <- direct_effect_prop + 1.96 * direct_se_prop

# Indirect Effects for Each Mediator

indirect_effects_prop <- c(
  coef(prop_1)["prop_dmg"] * coef(prop_full)["fwb_war"],
  coef(prop_2)["prop_dmg"] * coef(prop_full)["fwb_expect"],
  coef(prop_4)["prop_dmg"] * coef(prop_full)["feel_sad"],
  coef(prop_5)["prop_dmg"] * coef(prop_full)["feel_energy"],
  coef(prop_6)["prop_dmg"] * coef(prop_full)["feel_calm"]
)

# Standard error of indirect effect
indirect_se_prop <- sqrt(
  (coef(prop_1)["prop_dmg"]^2 * summary(prop_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(prop_full)["fwb_war"]^2 * summary(prop_1)$coefficients["prop_dmg", "Std. Error"]^2) +
  (coef(prop_2)["prop_dmg"]^2 * summary(prop_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(prop_full)["fwb_expect"]^2 * summary(prop_2)$coefficients["prop_dmg", "Std. Error"]^2) +
  (coef(prop_4)["prop_dmg"]^2 * summary(prop_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(prop_full)["feel_sad"]^2 * summary(prop_4)$coefficients["prop_dmg", "Std. Error"]^2) +
  (coef(prop_5)["prop_dmg"]^2 * summary(prop_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(prop_full)["feel_energy"]^2 * summary(prop_5)$coefficients["prop_dmg", "Std. Error"]^2) +
  (coef(prop_6)["prop_dmg"]^2 * summary(prop_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(prop_full)["feel_calm"]^2 * summary(prop_6)$coefficients["prop_dmg", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect_prop <- sum(indirect_effects_prop)
indirect_pvalue_prop <- 2 * (1 - pnorm(abs(indirect_effect_prop / indirect_se_prop)))
indirect_ci_low_prop <- indirect_effect_prop - 1.96 * indirect_se_prop
indirect_ci_high_prop <- indirect_effect_prop + 1.96 * indirect_se_prop

# Compile results for prop_dmg
results_prop <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect_prop, indirect_effect_prop),
  Std.Error = c(direct_se_prop, indirect_se_prop),
  P.Value = c(direct_pvalue_prop, indirect_pvalue_prop),
  CI.Lower = c(direct_ci_low_prop, indirect_ci_low_prop),
  CI.Upper = c(direct_ci_high_prop, indirect_ci_high_prop)
)

results_prop
```

```{r}
# Bombing 
bom_full <- lm(score.c ~ bombing + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

bom_1 <- lm(fwb_war ~ bombing + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

bom_2 <- lm(fwb_expect ~ bombing + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

bom_4 <- lm(feel_sad ~ bombing + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

bom_5 <- lm(feel_energy ~ bombing + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

bom_6 <- lm(feel_calm ~ bombing + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(bom_full, 
          bom_1, 
          bom_2,
          bom_4,
          bom_5,
          bom_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect for bombing
direct_effect_bom <- coef(bom_full)["bombing"]
direct_se_bom <- summary(bom_full)$coefficients["bombing", "Std. Error"]
direct_pvalue_bom <- summary(bom_full)$coefficients["bombing", "Pr(>|t|)"]
direct_ci_low_bom <- direct_effect_bom - 1.96 * direct_se_bom
direct_ci_high_bom <- direct_effect_bom + 1.96 * direct_se_bom

# Indirect Effects for Each Mediator

indirect_effects_bom <- c(
  coef(bom_1)["bombing"] * coef(bom_full)["fwb_war"],
  coef(bom_2)["bombing"] * coef(bom_full)["fwb_expect"],
  coef(bom_4)["bombing"] * coef(bom_full)["feel_sad"],
  coef(bom_5)["bombing"] * coef(bom_full)["feel_energy"],
  coef(bom_6)["bombing"] * coef(bom_full)["feel_calm"]
)

# Standard error of indirect effect
indirect_se_bom <- sqrt(
  (coef(bom_1)["bombing"]^2 * summary(bom_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(bom_full)["fwb_war"]^2 * summary(bom_1)$coefficients["bombing", "Std. Error"]^2) +
  (coef(bom_2)["bombing"]^2 * summary(bom_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(bom_full)["fwb_expect"]^2 * summary(bom_2)$coefficients["bombing", "Std. Error"]^2) +
  (coef(bom_4)["bombing"]^2 * summary(bom_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(bom_full)["feel_sad"]^2 * summary(bom_4)$coefficients["bombing", "Std. Error"]^2) +
  (coef(bom_5)["bombing"]^2 * summary(bom_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(bom_full)["feel_energy"]^2 * summary(bom_5)$coefficients["bombing", "Std. Error"]^2) +
  (coef(bom_6)["bombing"]^2 * summary(bom_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(bom_full)["feel_calm"]^2 * summary(bom_6)$coefficients["bombing", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect_bom <- sum(indirect_effects_bom)
indirect_pvalue_bom <- 2 * (1 - pnorm(abs(indirect_effect_bom / indirect_se_bom)))
indirect_ci_low_bom <- indirect_effect_bom - 1.96 * indirect_se_bom
indirect_ci_high_bom <- indirect_effect_bom + 1.96 * indirect_se_bom

# Compile results for bombing
results_bom <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect_bom, indirect_effect_bom),
  Std.Error = c(direct_se_bom, indirect_se_bom),
  P.Value = c(direct_pvalue_bom, indirect_pvalue_bom),
  CI.Lower = c(direct_ci_low_bom, indirect_ci_low_bom),
  CI.Upper = c(direct_ci_high_bom, indirect_ci_high_bom)
)

results_bom
```

```{r}
# Phys violence 
phys_full <- lm(score.c ~ phys_viol + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

phys_1 <- lm(fwb_war ~ phys_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

phys_2 <- lm(fwb_expect ~ phys_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

phys_4 <- lm(feel_sad ~ phys_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

phys_5 <- lm(feel_energy ~ phys_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

phys_6 <- lm(feel_calm ~ phys_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(phys_full, 
          phys_1, 
          phys_2,
          phys_4,
          phys_5,
          phys_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect for phys_viol
direct_effect_phys <- coef(phys_full)["phys_viol"]
direct_se_phys <- summary(phys_full)$coefficients["phys_viol", "Std. Error"]
direct_pvalue_phys <- summary(phys_full)$coefficients["phys_viol", "Pr(>|t|)"]
direct_ci_low_phys <- direct_effect_phys - 1.96 * direct_se_phys
direct_ci_high_phys <- direct_effect_phys + 1.96 * direct_se_phys

# Indirect Effects for Each Mediator

indirect_effects_phys <- c(
  coef(phys_1)["phys_viol"] * coef(phys_full)["fwb_war"],
  coef(phys_2)["phys_viol"] * coef(phys_full)["fwb_expect"],
  coef(phys_4)["phys_viol"] * coef(phys_full)["feel_sad"],
  coef(phys_5)["phys_viol"] * coef(phys_full)["feel_energy"],
  coef(phys_6)["phys_viol"] * coef(phys_full)["feel_calm"]
)

# Standard error of indirect effect
indirect_se_phys <- sqrt(
  (coef(phys_1)["phys_viol"]^2 * summary(phys_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(phys_full)["fwb_war"]^2 * summary(phys_1)$coefficients["phys_viol", "Std. Error"]^2) +
  (coef(phys_2)["phys_viol"]^2 * summary(phys_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(phys_full)["fwb_expect"]^2 * summary(phys_2)$coefficients["phys_viol", "Std. Error"]^2) +
  (coef(phys_4)["phys_viol"]^2 * summary(phys_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(phys_full)["feel_sad"]^2 * summary(phys_4)$coefficients["phys_viol", "Std. Error"]^2) +
  (coef(phys_5)["phys_viol"]^2 * summary(phys_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(phys_full)["feel_energy"]^2 * summary(phys_5)$coefficients["phys_viol", "Std. Error"]^2) +
  (coef(phys_6)["phys_viol"]^2 * summary(phys_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(phys_full)["feel_calm"]^2 * summary(phys_6)$coefficients["phys_viol", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect_phys <- sum(indirect_effects_phys)
indirect_pvalue_phys <- 2 * (1 - pnorm(abs(indirect_effect_phys / indirect_se_phys)))
indirect_ci_low_phys <- indirect_effect_phys - 1.96 * indirect_se_phys
indirect_ci_high_phys <- indirect_effect_phys + 1.96 * indirect_se_phys

# Compile results for phys_viol
results_phys <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect_phys, indirect_effect_phys),
  Std.Error = c(direct_se_phys, indirect_se_phys),
  P.Value = c(direct_pvalue_phys, indirect_pvalue_phys),
  CI.Lower = c(direct_ci_low_phys, indirect_ci_low_phys),
  CI.Upper = c(direct_ci_high_phys, indirect_ci_high_phys)
)

results_phys
```

```{r}
# Emo violence
emo_full <- lm(score.c ~ emo_viol + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

emo_1 <- lm(fwb_war ~ emo_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

emo_2 <- lm(fwb_expect ~ emo_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

emo_4 <- lm(feel_sad ~ emo_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

emo_5 <- lm(feel_energy ~ emo_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

emo_6 <- lm(feel_calm ~ emo_viol + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(emo_full, 
          emo_1, 
          emo_2,
          emo_4,
          emo_5,
          emo_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect for emo_viol
direct_effect_emo <- coef(emo_full)["emo_viol"]
direct_se_emo <- summary(emo_full)$coefficients["emo_viol", "Std. Error"]
direct_pvalue_emo <- summary(emo_full)$coefficients["emo_viol", "Pr(>|t|)"]
direct_ci_low_emo <- direct_effect_emo - 1.96 * direct_se_emo
direct_ci_high_emo <- direct_effect_emo + 1.96 * direct_se_emo

# Indirect Effects for Each Mediator

indirect_effects_emo <- c(
  coef(emo_1)["emo_viol"] * coef(emo_full)["fwb_war"],
  coef(emo_2)["emo_viol"] * coef(emo_full)["fwb_expect"],
  coef(emo_4)["emo_viol"] * coef(emo_full)["feel_sad"],
  coef(emo_5)["emo_viol"] * coef(emo_full)["feel_energy"],
  coef(emo_6)["emo_viol"] * coef(emo_full)["feel_calm"]
)

# Standard error of indirect effect
indirect_se_emo <- sqrt(
  (coef(emo_1)["emo_viol"]^2 * summary(emo_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(emo_full)["fwb_war"]^2 * summary(emo_1)$coefficients["emo_viol", "Std. Error"]^2) +
  (coef(emo_2)["emo_viol"]^2 * summary(emo_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(emo_full)["fwb_expect"]^2 * summary(emo_2)$coefficients["emo_viol", "Std. Error"]^2) +
  (coef(emo_4)["emo_viol"]^2 * summary(emo_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(emo_full)["feel_sad"]^2 * summary(emo_4)$coefficients["emo_viol", "Std. Error"]^2) +
  (coef(emo_5)["emo_viol"]^2 * summary(emo_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(emo_full)["feel_energy"]^2 * summary(emo_5)$coefficients["emo_viol", "Std. Error"]^2) +
  (coef(emo_6)["emo_viol"]^2 * summary(emo_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(emo_full)["feel_calm"]^2 * summary(emo_6)$coefficients["emo_viol", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect_emo <- sum(indirect_effects_emo)
indirect_pvalue_emo <- 2 * (1 - pnorm(abs(indirect_effect_emo / indirect_se_emo)))
indirect_ci_low_emo <- indirect_effect_emo - 1.96 * indirect_se_emo
indirect_ci_high_emo <- indirect_effect_emo + 1.96 * indirect_se_emo

# Compile results for emo_viol
results_emo <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect_emo, indirect_effect_emo),
  Std.Error = c(direct_se_emo, indirect_se_emo),
  P.Value = c(direct_pvalue_emo, indirect_pvalue_emo),
  CI.Lower = c(direct_ci_low_emo, indirect_ci_low_emo),
  CI.Upper = c(direct_ci_high_emo, indirect_ci_high_emo)
)

print(results_emo)

```

```{r}
# Robbery
rob_full <- lm(score.c ~ robbery + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

rob_1 <- lm(fwb_war ~ robbery + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

rob_2 <- lm(fwb_expect ~ robbery + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

rob_4 <- lm(feel_sad ~ robbery + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

rob_5 <- lm(feel_energy ~ robbery + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

rob_6 <- lm(feel_calm ~ robbery + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(rob_full, 
          rob_1, 
          rob_2,
          rob_4,
          rob_5,
          rob_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect for robbery
direct_effect_rob <- coef(rob_full)["robbery"]
direct_se_rob <- summary(rob_full)$coefficients["robbery", "Std. Error"]
direct_pvalue_rob <- summary(rob_full)$coefficients["robbery", "Pr(>|t|)"]
direct_ci_low_rob <- direct_effect_rob - 1.96 * direct_se_rob
direct_ci_high_rob <- direct_effect_rob + 1.96 * direct_se_rob

# Indirect Effects for Each Mediator

indirect_effects_rob <- c(
  coef(rob_1)["robbery"] * coef(rob_full)["fwb_war"],
  coef(rob_2)["robbery"] * coef(rob_full)["fwb_expect"],
  coef(rob_4)["robbery"] * coef(rob_full)["feel_sad"],
  coef(rob_5)["robbery"] * coef(rob_full)["feel_energy"],
  coef(rob_6)["robbery"] * coef(rob_full)["feel_calm"]
)

# Standard error of indirect effect
indirect_se_rob <- sqrt(
  (coef(rob_1)["robbery"]^2 * summary(rob_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(rob_full)["fwb_war"]^2 * summary(rob_1)$coefficients["robbery", "Std. Error"]^2) +
  (coef(rob_2)["robbery"]^2 * summary(rob_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(rob_full)["fwb_expect"]^2 * summary(rob_2)$coefficients["robbery", "Std. Error"]^2) +
  (coef(rob_4)["robbery"]^2 * summary(rob_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(rob_full)["feel_sad"]^2 * summary(rob_4)$coefficients["robbery", "Std. Error"]^2) +
  (coef(rob_5)["robbery"]^2 * summary(rob_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(rob_full)["feel_energy"]^2 * summary(rob_5)$coefficients["robbery", "Std. Error"]^2) +
  (coef(rob_6)["robbery"]^2 * summary(rob_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(rob_full)["feel_calm"]^2 * summary(rob_6)$coefficients["robbery", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect_rob <- sum(indirect_effects_rob)
indirect_pvalue_rob <- 2 * (1 - pnorm(abs(indirect_effect_rob / indirect_se_rob)))
indirect_ci_low_rob <- indirect_effect_rob - 1.96 * indirect_se_rob
indirect_ci_high_rob <- indirect_effect_rob + 1.96 * indirect_se_rob

# Compile results for robbery
results_rob <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect_rob, indirect_effect_rob),
  Std.Error = c(direct_se_rob, indirect_se_rob),
  P.Value = c(direct_pvalue_rob, indirect_pvalue_rob),
  CI.Lower = c(direct_ci_low_rob, indirect_ci_low_rob),
  CI.Upper = c(direct_ci_high_rob, indirect_ci_high_rob)
)

print(results_rob)


```

```{r}
# Fam AFU
fam_afu_full <- lm(score.c ~ fam_afu + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fafu_1 <- lm(fwb_war ~ fam_afu + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fafu_2 <- lm(fwb_expect ~ fam_afu + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fafu_4 <- lm(feel_sad ~ fam_afu + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fafu_5 <- lm(feel_energy ~ fam_afu + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fafu_6 <- lm(feel_calm ~ fam_afu + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(fam_afu_full, 
          fafu_1, 
          fafu_2,
          fafu_4,
          fafu_5,
          fafu_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect for fam_afu
direct_effect_fafu <- coef(fam_afu_full)["fam_afu"]
direct_se_fafu <- summary(fam_afu_full)$coefficients["fam_afu", "Std. Error"]
direct_pvalue_fafu <- summary(fam_afu_full)$coefficients["fam_afu", "Pr(>|t|)"]
direct_ci_low_fafu <- direct_effect_fafu - 1.96 * direct_se_fafu
direct_ci_high_fafu <- direct_effect_fafu + 1.96 * direct_se_fafu

# Indirect Effects for Each Mediator

indirect_effects_fafu <- c(
  coef(fafu_1)["fam_afu"] * coef(fam_afu_full)["fwb_war"],
  coef(fafu_2)["fam_afu"] * coef(fam_afu_full)["fwb_expect"],
  coef(fafu_4)["fam_afu"] * coef(fam_afu_full)["feel_sad"],
  coef(fafu_5)["fam_afu"] * coef(fam_afu_full)["feel_energy"],
  coef(fafu_6)["fam_afu"] * coef(fam_afu_full)["feel_calm"]
)

# Standard error of indirect effect
indirect_se_fafu <- sqrt(
  (coef(fafu_1)["fam_afu"]^2 * summary(fam_afu_full)$coefficients["fwb_war", "Std. Error"]^2) +
  (coef(fam_afu_full)["fwb_war"]^2 * summary(fafu_1)$coefficients["fam_afu", "Std. Error"]^2) +
  (coef(fafu_2)["fam_afu"]^2 * summary(fam_afu_full)$coefficients["fwb_expect", "Std. Error"]^2) +
  (coef(fam_afu_full)["fwb_expect"]^2 * summary(fafu_2)$coefficients["fam_afu", "Std. Error"]^2) +
  (coef(fafu_4)["fam_afu"]^2 * summary(fam_afu_full)$coefficients["feel_sad", "Std. Error"]^2) +
  (coef(fam_afu_full)["feel_sad"]^2 * summary(fafu_4)$coefficients["fam_afu", "Std. Error"]^2) +
  (coef(fafu_5)["fam_afu"]^2 * summary(fam_afu_full)$coefficients["feel_energy", "Std. Error"]^2) +
  (coef(fam_afu_full)["feel_energy"]^2 * summary(fafu_5)$coefficients["fam_afu", "Std. Error"]^2) +
  (coef(fafu_6)["fam_afu"]^2 * summary(fam_afu_full)$coefficients["feel_calm", "Std. Error"]^2) +
  (coef(fam_afu_full)["feel_calm"]^2 * summary(fafu_6)$coefficients["fam_afu", "Std. Error"]^2)
)

# Assuming normal distribution for the indirect effect
indirect_effect_fafu <- sum(indirect_effects_fafu)
indirect_pvalue_fafu <- 2 * (1 - pnorm(abs(indirect_effect_fafu / indirect_se_fafu)))
indirect_ci_low_fafu <- indirect_effect_fafu - 1.96 * indirect_se_fafu
indirect_ci_high_fafu <- indirect_effect_fafu + 1.96 * indirect_se_fafu

# Compile results for fam_afu
results_fafu <- data.frame(
  Effect = c("Direct", "Indirect"),
  Estimate = c(direct_effect_fafu, indirect_effect_fafu),
  Std.Error = c(direct_se_fafu, indirect_se_fafu),
  P.Value = c(direct_pvalue_fafu, indirect_pvalue_fafu),
  CI.Lower = c(direct_ci_low_fafu, indirect_ci_low_fafu),
  CI.Upper = c(direct_ci_high_fafu, indirect_ci_high_fafu)
)

print(results_fafu)

```

```{r}
# Fam death
fam_full <- lm(score.c ~ fam_death + fwb_war + fwb_expect + feel_sad + feel_energy + feel_calm + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fam_1 <- lm(fwb_war ~ fam_death + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fam_2 <- lm(fwb_expect ~ fam_death + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fam_4 <- lm(feel_sad ~ fam_death + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fam_5 <- lm(feel_energy ~ fam_death + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

fam_6 <- lm(feel_calm ~ fam_death + monthly_inc + region_war + gender + fin_safety + debts + age, data = dt)

stargazer(fam_full, 
          fam_1, 
          fam_2,
          fam_4,
          fam_5,
          fam_6,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

# Direct Effect for fam_death
# direct_effect_fam <- coef(fam_full)["fam_death"]
# direct_se_fam <- summary(fam_full)$coefficients["fam_death", "Std. Error"]
# direct_pvalue_fam <- summary(fam_full)$coefficients["fam_death", "Pr(>|t|)"]
# direct_ci_low_fam <- direct_effect_fam - 1.96 * direct_se_fam
# direct_ci_high_fam <- direct_effect_fam + 1.96 * direct_se_fam
# 
# # Indirect Effects for Each Mediator
# 
# indirect_effects_fam <- c(
#   coef(fam_1)["fam_death"] * coef(fam_full)["fwb_war"],
#   coef(fam_2)["fam_death"] * coef(fam_full)["fwb_expect"],
#   coef(fam_4)["fam_death"] * coef(fam_full)["feel_sad"],
#   coef(fam_5)["fam_death"] * coef(fam_full)["feel_energy"],
#   coef(fam_6)["fam_death"] * coef(fam_full)["feel_calm"]
# )
# 
# # Standard error of indirect effect
# indirect_se_fam <- sqrt(
#   (coef(fam_1)["fam_death"]^2 * summary(fam_full)$coefficients["fwb_war", "Std. Error"]^2) +
#   (coef(fam_full)["fwb_war"]^2 * summary(fam_1)$coefficients["fam_death", "Std. Error"]^2) +
#   (coef(fam_2)["fam_death"]^2 * summary(fam_full)$coefficients["fwb_expect", "Std. Error"]^2) +
#   (coef(fam_full)["fwb_expect"]^2 * summary(fam_2)$coefficients["fam_death", "Std. Error"]^2) +
#   (coef(fam_4)["fam_death"]^2 * summary(fam_full)$coefficients["feel_sad", "Std. Error"]^2) +
#   (coef(fam_full)["feel_sad"]^2 * summary(fam_4)$coefficients["fam_death", "Std. Error"]^2) +
#   (coef(fam_5)["fam_death"]^2 * summary(fam_full)$coefficients["feel_energy", "Std. Error"]^2) +
#   (coef(fam_full)["feel_energy"]^2 * summary(fam_5)$coefficients["fam_death", "Std. Error"]^2) +
#   (coef(fam_6)["fam_death"]^2 * summary(fam_full)$coefficients["feel_calm", "Std. Error"]^2) +
#   (coef(fam_full)["feel_calm"]^2 * summary(fam_6)$coefficients["fam_death", "Std. Error"]^2)
# )
# 
# # Assuming normal distribution for the indirect effect
# indirect_effect_fam <- sum(indirect_effects_fam)
# indirect_pvalue_fam <- 2 * (1 - pnorm(abs(indirect_effect_fam / indirect_se_fam)))
# indirect_ci_low_fam <- indirect_effect_fam - 1.96 * indirect_se_fam
# indirect_ci_high_fam <- indirect_effect_fam + 1.96 * indirect_se_fam
# 
# # Compile results for fam_death
# results_fam <- data.frame(
#   Effect = c("Direct", "Indirect"),
#   Estimate = c(direct_effect_fam, indirect_effect_fam),
#   Std.Error = c(direct_se_fam, indirect_se_fam),
#   P.Value = c(direct_pvalue_fam, indirect_pvalue_fam),
#   CI.Lower = c(direct_ci_low_fam, indirect_ci_low_fam),
#   CI.Upper = c(direct_ci_high_fam, indirect_ci_high_fam)
# )
# 
# print(results_fam)
# 
# # Direct Effect for fam_death (path c')
# c_prime_fam_se <- summary(fam_full)$coefficients["fam_death", "Std. Error"]
# c_prime_fam_p <- summary(fam_full)$coefficients["fam_death", "Pr(>|t|)"]
# c_prime_fam_ci <- c(c_prime_fam - 1.96 * c_prime_fam_se,
#                     c_prime_fam + 1.96 * c_prime_fam_se)
# 
# # a paths and their SEs and p-values
# a_fam_se <- c(
#   summary(fam_1)$coefficients["fam_death", "Std. Error"],
#   summary(fam_2)$coefficients["fam_death", "Std. Error"],
#   summary(fam_4)$coefficients["fam_death", "Std. Error"],
#   summary(fam_5)$coefficients["fam_death", "Std. Error"],
#   summary(fam_6)$coefficients["fam_death", "Std. Error"]
# )
# 
# a_fam_p <- c(
#   summary(fam_1)$coefficients["fam_death", "Pr(>|t|)"],
#   summary(fam_2)$coefficients["fam_death", "Pr(>|t|)"],
#   summary(fam_4)$coefficients["fam_death", "Pr(>|t|)"],
#   summary(fam_5)$coefficients["fam_death", "Pr(>|t|)"],
#   summary(fam_6)$coefficients["fam_death", "Pr(>|t|)"]
# )
# 
# a_fam_ci <- t(sapply(1:length(a_fam), function(i) {
#   c(a_fam[i] - 1.96 * a_fam_se[i], a_fam[i] + 1.96 * a_fam_se[i])
# }))
# 
# # b paths and their SEs and p-values
# b_fam_se <- c(
#   summary(fam_full)$coefficients["fwb_war", "Std. Error"],
#   summary(fam_full)$coefficients["fwb_expect", "Std. Error"],
#   summary(fam_full)$coefficients["feel_sad", "Std. Error"],
#   summary(fam_full)$coefficients["feel_energy", "Std. Error"],
#   summary(fam_full)$coefficients["feel_calm", "Std. Error"]
# )
# 
# b_fam_p <- c(
#   summary(fam_full)$coefficients["fwb_war", "Pr(>|t|)"],
#   summary(fam_full)$coefficients["fwb_expect", "Pr(>|t|)"],
#   summary(fam_full)$coefficients["feel_sad", "Pr(>|t|)"],
#   summary(fam_full)$coefficients["feel_energy", "Pr(>|t|)"],
#   summary(fam_full)$coefficients["feel_calm", "Pr(>|t|)"]
# )
# 
# b_fam_ci <- t(sapply(1:length(b_fam), function(i) {
#   c(b_fam[i] - 1.96 * b_fam_se[i], b_fam[i] + 1.96 * b_fam_se[i])
# }))
# 
# # Display the effects
# results_fam <- data.frame(
#   Path = c("c'", paste0("a", 1:5), paste0("b", 1:5)),
#   Effect = c(c_prime_fam, a_fam, b_fam),
#   P_Value = c(c_prime_fam_p, a_fam_p, b_fam_p),
#   Lower_CI = c(c_prime_fam_ci[1], a_fam_ci[,1], b_fam_ci[,1]),
#   Upper_CI = c(c_prime_fam_ci[2], a_fam_ci[,2], b_fam_ci[,2])
# )
# 
# print(results_fam)
```

```{r}
# Function to return asterisks for significance
significance_asterisks <- function(p_value) {
  if (p_value < 0.01) {
    return("***")
  } else if (p_value < 0.05) {
    return("**")
  } else if (p_value < 0.1) {
    return("*")
  } else {
    return("")
  }
}

# Function to generate results
generate_results <- function(full_model, models, predictor) {
  c_prime_se <- summary(full_model)$coefficients[predictor, "Std. Error"]
  c_prime_p <- summary(full_model)$coefficients[predictor, "Pr(>|t|)"]
  c_prime <- coef(full_model)[predictor]
  c_prime_ci <- c(c_prime - 1.96 * c_prime_se, c_prime + 1.96 * c_prime_se)

  # a paths and their SEs and p-values
  a_se <- sapply(models, function(mod) summary(mod)$coefficients[predictor, "Std. Error"])
  a_p <- sapply(models, function(mod) summary(mod)$coefficients[predictor, "Pr(>|t|)"])
  a <- sapply(models, function(mod) coef(mod)[predictor])
  a_ci <- t(sapply(1:length(a), function(i) {
    c(a[i] - 1.96 * a_se[i], a[i] + 1.96 * a_se[i])
  }))

  # b paths and their SEs and p-values
  mediators <- c("fwb_war", "fwb_expect", "feel_sad", "feel_energy", "feel_calm")
  b_se <- sapply(mediators, function(med) summary(full_model)$coefficients[med, "Std. Error"])
  b_p <- sapply(mediators, function(med) summary(full_model)$coefficients[med, "Pr(>|t|)"])
  b <- sapply(mediators, function(med) coef(full_model)[med])
  b_ci <- t(sapply(1:length(b), function(i) {
    c(b[i] - 1.96 * b_se[i], b[i] + 1.96 * b_se[i])
  }))

  # Indirect effects and their SEs (using the delta method approximation for SEs)
  ab <- a * b
  ab_se <- sqrt(a_se^2 * b^2 + b_se^2 * a^2)
  ab_ci <- t(sapply(1:length(ab), function(i) {
    c(ab[i] - 1.96 * ab_se[i], ab[i] + 1.96 * ab_se[i])
  }))

  # p-values for indirect effects using the normal distribution
  ab_p <- 2 * (1 - pnorm(abs(ab / ab_se)))

  # Updating the results data frame to include indirect effects
  results <- data.frame(
    Path = c("c'", paste0("a", 1:5), paste0("b", 1:5), paste0("ab", 1:5)),
    Effect = c(c_prime, a, b, ab),
    P_Value = c(c_prime_p, a_p, b_p, ab_p),
    Lower_CI = c(c_prime_ci[1], a_ci[,1], b_ci[,1], ab_ci[,1]),
    Upper_CI = c(c_prime_ci[2], a_ci[,2], b_ci[,2], ab_ci[,2])
  )

  # Annotating the p-values with asterisks for significance
  results$Significance <- sapply(results$P_Value, significance_asterisks)

  return(results)
}

# Adding occupation to the predictors list and the corresponding full model to the full_models list
predictors <- c("prop_dmg", "bombing", "phys_viol", "emo_viol", "robbery", "fam_afu", "fam_death", "occupation")
full_models <- list(prop_full, bom_full, phys_full, emo_full, rob_full, fam_afu_full, fam_full, occ_full)

for(i in 1:length(predictors)) {
  predictor <- predictors[i]
  full_model <- full_models[[i]]

  # mediator models
  models <- list(
    lm(formula(paste0("fwb_war ~ ", predictor, " + monthly_inc + region_war + gender + fin_safety + debts + age")), data=dt),
    lm(formula(paste0("fwb_expect ~ ", predictor, " + monthly_inc + region_war + gender + fin_safety + debts + age")), data=dt),
    lm(formula(paste0("feel_sad ~ ", predictor, " + monthly_inc + region_war + gender + fin_safety + debts + age")), data=dt),
    lm(formula(paste0("feel_energy ~ ", predictor, " + monthly_inc + region_war + gender + fin_safety + debts + age")), data=dt),
    lm(formula(paste0("feel_calm ~ ", predictor, " + monthly_inc + region_war + gender + fin_safety + debts + age")), data=dt)
  )

  results <- generate_results(full_model, models, predictor)
  print(paste("Results for", predictor))
  print(results)
  cat("\n")
}
```

```{r}
install.packages("semTools")
install.packages("semPlot")
library(semPlot)

library(lavaan)

model_syntax <- "
# Direct effect
  score.c ~ c*fam_death
  
  # Mediator paths
  fwb_war ~ a1*fam_death
  fwb_expect ~ a2*fam_death
  feel_sad ~ a3*fam_death
  feel_energy ~ a4*fam_death
  feel_calm ~ a5*fam_death
  
  # Outcome paths
  score.c ~ b1*fwb_war
  score.c ~ b2*fwb_expect
  score.c ~ b3*feel_sad
  score.c ~ b4*feel_energy
  score.c ~ b5*feel_calm
"

fit <- sem(model = model_syntax, data = dt)

semPaths(fit, whatLabels="est.std", style="lisrel", layout="tree")
```

```{r robust checks}
rob_mod_war <- lm(score.c ~ Alarms + occupation + bombing + prop_dmg + phys_viol + emo_viol + robbery + fam_afu + fam_death + phys_injury + depression + confid_loss + insom + region_war + age + gender, data = result)
  
rob_mod_fwb <- lm(score.c ~ sep + monthly_inc + fwb_expect + fwb_war + debts + region_war + fin_safety, result)


rob_mod_mh <- lm(score.c ~ Alarms + feel_calm + feel_energy + feel_sad + married_together + married_separate + not_married + no_kids, result)

stargazer(rob_mod_war, mod_score,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")


stargazer(rob_mod_fwb, mod_fwb_score,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")

stargazer(rob_mod_mh, mod_mh_td,
          header=FALSE,
          type='text', 
          digits=3,
          font.size = "normalsize",
          align = TRUE,
          omit.stat=c("ser"),
          column.sep.width = "-25pt")
```

## 
